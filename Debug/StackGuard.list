
StackGuard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08001664  08001664  00002664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017d4  080017d4  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080017d4  080017d4  000027d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017dc  080017dc  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017dc  080017dc  000027dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017e0  080017e0  000027e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080017e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001840  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001840  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001296  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006f2  00000000  00000000  00004322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00004a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000121  00000000  00000000  00004bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa9f  00000000  00000000  00004ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021b2  00000000  00000000  00014780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000554b8  00000000  00000000  00016932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006bdea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d04  00000000  00000000  0006be30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0006cb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800164c 	.word	0x0800164c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800164c 	.word	0x0800164c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000284:	f3bf 8f4f 	dsb	sy
}
 8000288:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <__NVIC_SystemReset+0x24>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000292:	4904      	ldr	r1, [pc, #16]	@ (80002a4 <__NVIC_SystemReset+0x24>)
 8000294:	4b04      	ldr	r3, [pc, #16]	@ (80002a8 <__NVIC_SystemReset+0x28>)
 8000296:	4313      	orrs	r3, r2
 8000298:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800029a:	f3bf 8f4f 	dsb	sy
}
 800029e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80002a0:	bf00      	nop
 80002a2:	e7fd      	b.n	80002a0 <__NVIC_SystemReset+0x20>
 80002a4:	e000ed00 	.word	0xe000ed00
 80002a8:	05fa0004 	.word	0x05fa0004

080002ac <ConfigMPU>:
#define MPU_REGION_NUMBER       0
#define MPU_REGION_NO_ACCESS    (0x00)
#define MPU_RASR_ENABLE         (1UL << 0)

static void ConfigMPU(uint32_t base_addr, uint32_t size, uint32_t attributes)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	// Enable the MPU peripheral
    MPU->CTRL = MPU_CTRL_ENABLE_Msk;
 80002b8:	4b19      	ldr	r3, [pc, #100]	@ (8000320 <ConfigMPU+0x74>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	605a      	str	r2, [r3, #4]
    // Use default Memory Map for Privileged Software execution
    MPU->CTRL |= MPU_CTRL_PRIVDEFENA_Msk;
 80002be:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <ConfigMPU+0x74>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a17      	ldr	r2, [pc, #92]	@ (8000320 <ConfigMPU+0x74>)
 80002c4:	f043 0304 	orr.w	r3, r3, #4
 80002c8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80002ca:	f3bf 8f4f 	dsb	sy
}
 80002ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002d0:	f3bf 8f6f 	isb	sy
}
 80002d4:	bf00      	nop
    // Complete all previous memory operations
    __DSB();
    // Flush the Instruction Pipeline
    __ISB();
    // Set Memory Region Number
    MPU->RNR = MPU_REGION_NUMBER;
 80002d6:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <ConfigMPU+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
    // Set Memory Region Base Address
    MPU->RBAR = base_addr & MPU_RBAR_ADDR_Msk;
 80002dc:	4a10      	ldr	r2, [pc, #64]	@ (8000320 <ConfigMPU+0x74>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	f023 031f 	bic.w	r3, r3, #31
 80002e4:	60d3      	str	r3, [r2, #12]
    // Set Memory Access permissions
    MPU->RASR |= (attributes << MPU_RASR_AP_Pos);
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <ConfigMPU+0x74>)
 80002e8:	691a      	ldr	r2, [r3, #16]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	061b      	lsls	r3, r3, #24
 80002ee:	490c      	ldr	r1, [pc, #48]	@ (8000320 <ConfigMPU+0x74>)
 80002f0:	4313      	orrs	r3, r2
 80002f2:	610b      	str	r3, [r1, #16]
    // Set Memory Region Size
    MPU->RASR |= ((size << MPU_RASR_SIZE_Pos) & MPU_RASR_SIZE_Msk);
 80002f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <ConfigMPU+0x74>)
 80002f6:	691a      	ldr	r2, [r3, #16]
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000300:	4907      	ldr	r1, [pc, #28]	@ (8000320 <ConfigMPU+0x74>)
 8000302:	4313      	orrs	r3, r2
 8000304:	610b      	str	r3, [r1, #16]
    // Enable Memory Region
    MPU->RASR |= MPU_RASR_ENABLE;
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <ConfigMPU+0x74>)
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <ConfigMPU+0x74>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6113      	str	r3, [r2, #16]
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed90 	.word	0xe000ed90

08000324 <StackGuard_Init>:

void StackGuard_Init(uint32_t guard_size) 
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	UART2_Init();
 800032c:	f000 f88e 	bl	800044c <UART2_Init>
	// Calculate Guard buffer size
    extern uint32_t _estack;
    uint32_t guard_base = (uint32_t)&_estack - guard_size;
 8000330:	4a07      	ldr	r2, [pc, #28]	@ (8000350 <StackGuard_Init+0x2c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	60fb      	str	r3, [r7, #12]
    // Configure Guard Buffer with Attributes
    ConfigMPU(guard_base, guard_size, MPU_REGION_NO_ACCESS);
 8000338:	2200      	movs	r2, #0
 800033a:	6879      	ldr	r1, [r7, #4]
 800033c:	68f8      	ldr	r0, [r7, #12]
 800033e:	f7ff ffb5 	bl	80002ac <ConfigMPU>
    printf("[info] Configured Memory Region with MPU\n\r");
 8000342:	4804      	ldr	r0, [pc, #16]	@ (8000354 <StackGuard_Init+0x30>)
 8000344:	f000 fab6 	bl	80008b4 <iprintf>
}
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20018000 	.word	0x20018000
 8000354:	08001664 	.word	0x08001664

08000358 <MemManage_Handler>:

void MemManage_Handler(void) 
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
	printf("[fault] Executing Fault Handler\n\r");
 800035e:	481d      	ldr	r0, [pc, #116]	@ (80003d4 <MemManage_Handler+0x7c>)
 8000360:	f000 faa8 	bl	80008b4 <iprintf>
    uint32_t original_msp, msp, pc;
    // Save the current MSP
    __asm__("MRS %0, MSP" : "=r" (original_msp));
 8000364:	f3ef 8308 	mrs	r3, MSP
 8000368:	60fb      	str	r3, [r7, #12]
    // Switch to the fault stack
    __asm__("LDR R0, =_estack");
 800036a:	4823      	ldr	r0, [pc, #140]	@ (80003f8 <MemManage_Handler+0xa0>)
    __asm__("MSR MSP, R0");
 800036c:	f380 8808 	msr	MSP, r0
    // Capture MSP and PC from fault context
    __asm__("MRS %0, MSP" : "=r" (msp));
 8000370:	f3ef 8308 	mrs	r3, MSP
 8000374:	60bb      	str	r3, [r7, #8]
    __asm__("LDR %0, [SP, #24]" : "=r" (pc));
 8000376:	9b06      	ldr	r3, [sp, #24]
 8000378:	607b      	str	r3, [r7, #4]
    // Validate and fetch the faulting address
    uint32_t faulting_address = (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) ? SCB->MMFAR : 0xFFFFFFFF;
 800037a:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <MemManage_Handler+0x80>)
 800037c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800037e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000382:	2b00      	cmp	r3, #0
 8000384:	d002      	beq.n	800038c <MemManage_Handler+0x34>
 8000386:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MemManage_Handler+0x80>)
 8000388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800038a:	e001      	b.n	8000390 <MemManage_Handler+0x38>
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
 8000390:	603b      	str	r3, [r7, #0]
    // Print crash details
    printf("========== Crash Report ==========\n");
 8000392:	4812      	ldr	r0, [pc, #72]	@ (80003dc <MemManage_Handler+0x84>)
 8000394:	f000 faf6 	bl	8000984 <puts>
    printf("Fault Address  : 0x%08X\n", (unsigned int)faulting_address);
 8000398:	6839      	ldr	r1, [r7, #0]
 800039a:	4811      	ldr	r0, [pc, #68]	@ (80003e0 <MemManage_Handler+0x88>)
 800039c:	f000 fa8a 	bl	80008b4 <iprintf>
    printf("Fault Status   : 0x%08X\n", (unsigned int)SCB->CFSR);
 80003a0:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <MemManage_Handler+0x80>)
 80003a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003a4:	4619      	mov	r1, r3
 80003a6:	480f      	ldr	r0, [pc, #60]	@ (80003e4 <MemManage_Handler+0x8c>)
 80003a8:	f000 fa84 	bl	80008b4 <iprintf>
    printf("Stack Pointer  : 0x%08X\n", (unsigned int)msp);
 80003ac:	68b9      	ldr	r1, [r7, #8]
 80003ae:	480e      	ldr	r0, [pc, #56]	@ (80003e8 <MemManage_Handler+0x90>)
 80003b0:	f000 fa80 	bl	80008b4 <iprintf>
    printf("Program Counter: 0x%08X\n", (unsigned int)pc);
 80003b4:	6879      	ldr	r1, [r7, #4]
 80003b6:	480d      	ldr	r0, [pc, #52]	@ (80003ec <MemManage_Handler+0x94>)
 80003b8:	f000 fa7c 	bl	80008b4 <iprintf>
    printf("==================================\n");
 80003bc:	480c      	ldr	r0, [pc, #48]	@ (80003f0 <MemManage_Handler+0x98>)
 80003be:	f000 fae1 	bl	8000984 <puts>
    // Restore the original MSP
    __asm__("MSR MSP, %0" :: "r" (original_msp));
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	f383 8808 	msr	MSP, r3
    printf("[fault] Executing System Reset\n\r");
 80003c8:	480a      	ldr	r0, [pc, #40]	@ (80003f4 <MemManage_Handler+0x9c>)
 80003ca:	f000 fa73 	bl	80008b4 <iprintf>
    // Perform a system reset
    NVIC_SystemReset();
 80003ce:	f7ff ff57 	bl	8000280 <__NVIC_SystemReset>
 80003d2:	bf00      	nop
 80003d4:	08001690 	.word	0x08001690
 80003d8:	e000ed00 	.word	0xe000ed00
 80003dc:	080016b4 	.word	0x080016b4
 80003e0:	080016d8 	.word	0x080016d8
 80003e4:	080016f4 	.word	0x080016f4
 80003e8:	08001710 	.word	0x08001710
 80003ec:	0800172c 	.word	0x0800172c
 80003f0:	08001748 	.word	0x08001748
 80003f4:	0800176c 	.word	0x0800176c
 80003f8:	20018000 	.word	0x20018000

080003fc <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	085a      	lsrs	r2, r3, #1
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	441a      	add	r2, r3
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	fbb2 f3f3 	udiv	r3, r2, r3
 8000414:	b29b      	uxth	r3, r3
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 800042e:	6839      	ldr	r1, [r7, #0]
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ffe3 	bl	80003fc <Compute_UART_Baud>
 8000436:	4603      	mov	r3, r0
 8000438:	461a      	mov	r2, r3
 800043a:	4b03      	ldr	r3, [pc, #12]	@ (8000448 <UART2_SetBaudRate+0x24>)
 800043c:	609a      	str	r2, [r3, #8]
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40004400 	.word	0x40004400

0800044c <UART2_Init>:

void UART2_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <UART2_Init+0x68>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000454:	4a17      	ldr	r2, [pc, #92]	@ (80004b4 <UART2_Init+0x68>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <UART2_Init+0x68>)
 800045e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000460:	4a14      	ldr	r2, [pc, #80]	@ (80004b4 <UART2_Init+0x68>)
 8000462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000466:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 8000468:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <UART2_Init+0x6c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a12      	ldr	r2, [pc, #72]	@ (80004b8 <UART2_Init+0x6c>)
 800046e:	f023 0310 	bic.w	r3, r3, #16
 8000472:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000474:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <UART2_Init+0x6c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a0f      	ldr	r2, [pc, #60]	@ (80004b8 <UART2_Init+0x6c>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 8000480:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <UART2_Init+0x6c>)
 8000482:	6a1b      	ldr	r3, [r3, #32]
 8000484:	4a0c      	ldr	r2, [pc, #48]	@ (80004b8 <UART2_Init+0x6c>)
 8000486:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800048a:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 800048c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000490:	480a      	ldr	r0, [pc, #40]	@ (80004bc <UART2_Init+0x70>)
 8000492:	f7ff ffc7 	bl	8000424 <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000496:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <UART2_Init+0x74>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a09      	ldr	r2, [pc, #36]	@ (80004c0 <UART2_Init+0x74>)
 800049c:	f043 030c 	orr.w	r3, r3, #12
 80004a0:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <UART2_Init+0x74>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	4a06      	ldr	r2, [pc, #24]	@ (80004c0 <UART2_Init+0x74>)
 80004a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004ac:	60d3      	str	r3, [r2, #12]
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40023800 	.word	0x40023800
 80004b8:	40020000 	.word	0x40020000
 80004bc:	00f42400 	.word	0x00f42400
 80004c0:	40004400 	.word	0x40004400

080004c4 <UART2_TxChar>:

void UART2_TxChar(char ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART2->SR & USART_SR_TXE));
 80004ce:	bf00      	nop
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <UART2_TxChar+0x2c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f9      	beq.n	80004d0 <UART2_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART2->DR = (ch &0xFF);
 80004dc:	4a04      	ldr	r2, [pc, #16]	@ (80004f0 <UART2_TxChar+0x2c>)
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	6053      	str	r3, [r2, #4]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40004400 	.word	0x40004400

080004f4 <UART2_RxChar>:
		UART2_TxChar(*str++);
	}
}

uint8_t UART2_RxChar(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	while(!(USART2->SR & (1<<5)));
 80004f8:	bf00      	nop
 80004fa:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <UART2_RxChar+0x24>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <UART2_RxChar+0x6>
	return USART2->DR;
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <UART2_RxChar+0x24>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	b2db      	uxtb	r3, r3
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40004400 	.word	0x40004400

0800051c <_write>:

int _write(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e009      	b.n	8000542 <_write+0x26>
    {
        UART2_TxChar(ptr[i]);
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68ba      	ldr	r2, [r7, #8]
 8000532:	4413      	add	r3, r2
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffc4 	bl	80004c4 <UART2_TxChar>
    for (int i = 0; i < len; i++)
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	3301      	adds	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	697a      	ldr	r2, [r7, #20]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	429a      	cmp	r2, r3
 8000548:	dbf1      	blt.n	800052e <_write+0x12>
    }
    return len;
 800054a:	687b      	ldr	r3, [r7, #4]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <_read>:

int _read(int file, char *ptr, int len)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
    (void)file;
    for (int i = 0; i < len; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	e015      	b.n	8000592 <_read+0x3e>
    {
        ptr[i] = UART2_RxChar();
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	68ba      	ldr	r2, [r7, #8]
 800056a:	18d4      	adds	r4, r2, r3
 800056c:	f7ff ffc2 	bl	80004f4 <UART2_RxChar>
 8000570:	4603      	mov	r3, r0
 8000572:	7023      	strb	r3, [r4, #0]
        if (ptr[i] == '\r')
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	4413      	add	r3, r2
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b0d      	cmp	r3, #13
 800057e:	d105      	bne.n	800058c <_read+0x38>
        {
            ptr[i] = '\n';
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	4413      	add	r3, r2
 8000586:	220a      	movs	r2, #10
 8000588:	701a      	strb	r2, [r3, #0]
            break;
 800058a:	e006      	b.n	800059a <_read+0x46>
    for (int i = 0; i < len; i++)
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	3301      	adds	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	697a      	ldr	r2, [r7, #20]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	dbe5      	blt.n	8000566 <_read+0x12>
        }
    }
    return len;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	371c      	adds	r7, #28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd90      	pop	{r4, r7, pc}

080005a4 <RecursiveFunction>:
#include <stdint.h>
#include "UART.h"
#include "GUARD.h"

void RecursiveFunction(int depth)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b0e6      	sub	sp, #408	@ 0x198
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80005ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80005b2:	6018      	str	r0, [r3, #0]
    volatile int dummy[100];
    dummy[0] = depth;
 80005b4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80005b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80005bc:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80005c0:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80005c4:	6812      	ldr	r2, [r2, #0]
 80005c6:	601a      	str	r2, [r3, #0]
    RecursiveFunction(depth + 1);
 80005c8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80005cc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffe5 	bl	80005a4 <RecursiveFunction>
}
 80005da:	bf00      	nop
 80005dc:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <main>:

int main()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	UART2_Init();
 80005e8:	f7ff ff30 	bl	800044c <UART2_Init>
	printf("Hello World\n\r");
 80005ec:	4805      	ldr	r0, [pc, #20]	@ (8000604 <main+0x20>)
 80005ee:	f000 f961 	bl	80008b4 <iprintf>
	StackGuard_Init(128);
 80005f2:	2080      	movs	r0, #128	@ 0x80
 80005f4:	f7ff fe96 	bl	8000324 <StackGuard_Init>
	RecursiveFunction(0);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ffd3 	bl	80005a4 <RecursiveFunction>

	while(1)
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <main+0x1a>
 8000602:	bf00      	nop
 8000604:	08001790 	.word	0x08001790

08000608 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000630:	605a      	str	r2, [r3, #4]
  return 0;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <_isatty>:

int _isatty(int file)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000648:	2301      	movs	r3, #1
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000656:	b480      	push	{r7}
 8000658:	b085      	sub	sp, #20
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000678:	4a14      	ldr	r2, [pc, #80]	@ (80006cc <_sbrk+0x5c>)
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <_sbrk+0x60>)
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000684:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <_sbrk+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d102      	bne.n	8000692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <_sbrk+0x64>)
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <_sbrk+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	429a      	cmp	r2, r3
 800069e:	d207      	bcs.n	80006b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a0:	f000 fa9e 	bl	8000be0 <__errno>
 80006a4:	4603      	mov	r3, r0
 80006a6:	220c      	movs	r2, #12
 80006a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	e009      	b.n	80006c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b6:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	4a05      	ldr	r2, [pc, #20]	@ (80006d4 <_sbrk+0x64>)
 80006c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c2:	68fb      	ldr	r3, [r7, #12]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20018000 	.word	0x20018000
 80006d0:	00000400 	.word	0x00000400
 80006d4:	20000078 	.word	0x20000078
 80006d8:	200001c8 	.word	0x200001c8

080006dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006dc:	480d      	ldr	r0, [pc, #52]	@ (8000714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070a:	f000 fa6f 	bl	8000bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff ff69 	bl	80005e4 <main>

08000712 <LoopForever>:

LoopForever:
  b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   r0, =_estack
 8000714:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000720:	080017e4 	.word	0x080017e4
  ldr r2, =_sbss
 8000724:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000728:	200001c8 	.word	0x200001c8

0800072c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC_IRQHandler>
	...

08000730 <std>:
 8000730:	2300      	movs	r3, #0
 8000732:	b510      	push	{r4, lr}
 8000734:	4604      	mov	r4, r0
 8000736:	e9c0 3300 	strd	r3, r3, [r0]
 800073a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800073e:	6083      	str	r3, [r0, #8]
 8000740:	8181      	strh	r1, [r0, #12]
 8000742:	6643      	str	r3, [r0, #100]	@ 0x64
 8000744:	81c2      	strh	r2, [r0, #14]
 8000746:	6183      	str	r3, [r0, #24]
 8000748:	4619      	mov	r1, r3
 800074a:	2208      	movs	r2, #8
 800074c:	305c      	adds	r0, #92	@ 0x5c
 800074e:	f000 f9f9 	bl	8000b44 <memset>
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <std+0x58>)
 8000754:	6263      	str	r3, [r4, #36]	@ 0x24
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <std+0x5c>)
 8000758:	62a3      	str	r3, [r4, #40]	@ 0x28
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <std+0x60>)
 800075c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <std+0x64>)
 8000760:	6323      	str	r3, [r4, #48]	@ 0x30
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <std+0x68>)
 8000764:	6224      	str	r4, [r4, #32]
 8000766:	429c      	cmp	r4, r3
 8000768:	d006      	beq.n	8000778 <std+0x48>
 800076a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800076e:	4294      	cmp	r4, r2
 8000770:	d002      	beq.n	8000778 <std+0x48>
 8000772:	33d0      	adds	r3, #208	@ 0xd0
 8000774:	429c      	cmp	r4, r3
 8000776:	d105      	bne.n	8000784 <std+0x54>
 8000778:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800077c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000780:	f000 ba58 	b.w	8000c34 <__retarget_lock_init_recursive>
 8000784:	bd10      	pop	{r4, pc}
 8000786:	bf00      	nop
 8000788:	08000995 	.word	0x08000995
 800078c:	080009b7 	.word	0x080009b7
 8000790:	080009ef 	.word	0x080009ef
 8000794:	08000a13 	.word	0x08000a13
 8000798:	2000007c 	.word	0x2000007c

0800079c <stdio_exit_handler>:
 800079c:	4a02      	ldr	r2, [pc, #8]	@ (80007a8 <stdio_exit_handler+0xc>)
 800079e:	4903      	ldr	r1, [pc, #12]	@ (80007ac <stdio_exit_handler+0x10>)
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <stdio_exit_handler+0x14>)
 80007a2:	f000 b869 	b.w	8000878 <_fwalk_sglue>
 80007a6:	bf00      	nop
 80007a8:	20000000 	.word	0x20000000
 80007ac:	080014d5 	.word	0x080014d5
 80007b0:	20000010 	.word	0x20000010

080007b4 <cleanup_stdio>:
 80007b4:	6841      	ldr	r1, [r0, #4]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <cleanup_stdio+0x34>)
 80007b8:	4299      	cmp	r1, r3
 80007ba:	b510      	push	{r4, lr}
 80007bc:	4604      	mov	r4, r0
 80007be:	d001      	beq.n	80007c4 <cleanup_stdio+0x10>
 80007c0:	f000 fe88 	bl	80014d4 <_fflush_r>
 80007c4:	68a1      	ldr	r1, [r4, #8]
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <cleanup_stdio+0x38>)
 80007c8:	4299      	cmp	r1, r3
 80007ca:	d002      	beq.n	80007d2 <cleanup_stdio+0x1e>
 80007cc:	4620      	mov	r0, r4
 80007ce:	f000 fe81 	bl	80014d4 <_fflush_r>
 80007d2:	68e1      	ldr	r1, [r4, #12]
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <cleanup_stdio+0x3c>)
 80007d6:	4299      	cmp	r1, r3
 80007d8:	d004      	beq.n	80007e4 <cleanup_stdio+0x30>
 80007da:	4620      	mov	r0, r4
 80007dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e0:	f000 be78 	b.w	80014d4 <_fflush_r>
 80007e4:	bd10      	pop	{r4, pc}
 80007e6:	bf00      	nop
 80007e8:	2000007c 	.word	0x2000007c
 80007ec:	200000e4 	.word	0x200000e4
 80007f0:	2000014c 	.word	0x2000014c

080007f4 <global_stdio_init.part.0>:
 80007f4:	b510      	push	{r4, lr}
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <global_stdio_init.part.0+0x30>)
 80007f8:	4c0b      	ldr	r4, [pc, #44]	@ (8000828 <global_stdio_init.part.0+0x34>)
 80007fa:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <global_stdio_init.part.0+0x38>)
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	4620      	mov	r0, r4
 8000800:	2200      	movs	r2, #0
 8000802:	2104      	movs	r1, #4
 8000804:	f7ff ff94 	bl	8000730 <std>
 8000808:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800080c:	2201      	movs	r2, #1
 800080e:	2109      	movs	r1, #9
 8000810:	f7ff ff8e 	bl	8000730 <std>
 8000814:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000818:	2202      	movs	r2, #2
 800081a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800081e:	2112      	movs	r1, #18
 8000820:	f7ff bf86 	b.w	8000730 <std>
 8000824:	200001b4 	.word	0x200001b4
 8000828:	2000007c 	.word	0x2000007c
 800082c:	0800079d 	.word	0x0800079d

08000830 <__sfp_lock_acquire>:
 8000830:	4801      	ldr	r0, [pc, #4]	@ (8000838 <__sfp_lock_acquire+0x8>)
 8000832:	f000 ba00 	b.w	8000c36 <__retarget_lock_acquire_recursive>
 8000836:	bf00      	nop
 8000838:	200001bd 	.word	0x200001bd

0800083c <__sfp_lock_release>:
 800083c:	4801      	ldr	r0, [pc, #4]	@ (8000844 <__sfp_lock_release+0x8>)
 800083e:	f000 b9fb 	b.w	8000c38 <__retarget_lock_release_recursive>
 8000842:	bf00      	nop
 8000844:	200001bd 	.word	0x200001bd

08000848 <__sinit>:
 8000848:	b510      	push	{r4, lr}
 800084a:	4604      	mov	r4, r0
 800084c:	f7ff fff0 	bl	8000830 <__sfp_lock_acquire>
 8000850:	6a23      	ldr	r3, [r4, #32]
 8000852:	b11b      	cbz	r3, 800085c <__sinit+0x14>
 8000854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000858:	f7ff bff0 	b.w	800083c <__sfp_lock_release>
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <__sinit+0x28>)
 800085e:	6223      	str	r3, [r4, #32]
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <__sinit+0x2c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f5      	bne.n	8000854 <__sinit+0xc>
 8000868:	f7ff ffc4 	bl	80007f4 <global_stdio_init.part.0>
 800086c:	e7f2      	b.n	8000854 <__sinit+0xc>
 800086e:	bf00      	nop
 8000870:	080007b5 	.word	0x080007b5
 8000874:	200001b4 	.word	0x200001b4

08000878 <_fwalk_sglue>:
 8000878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800087c:	4607      	mov	r7, r0
 800087e:	4688      	mov	r8, r1
 8000880:	4614      	mov	r4, r2
 8000882:	2600      	movs	r6, #0
 8000884:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000888:	f1b9 0901 	subs.w	r9, r9, #1
 800088c:	d505      	bpl.n	800089a <_fwalk_sglue+0x22>
 800088e:	6824      	ldr	r4, [r4, #0]
 8000890:	2c00      	cmp	r4, #0
 8000892:	d1f7      	bne.n	8000884 <_fwalk_sglue+0xc>
 8000894:	4630      	mov	r0, r6
 8000896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800089a:	89ab      	ldrh	r3, [r5, #12]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d907      	bls.n	80008b0 <_fwalk_sglue+0x38>
 80008a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008a4:	3301      	adds	r3, #1
 80008a6:	d003      	beq.n	80008b0 <_fwalk_sglue+0x38>
 80008a8:	4629      	mov	r1, r5
 80008aa:	4638      	mov	r0, r7
 80008ac:	47c0      	blx	r8
 80008ae:	4306      	orrs	r6, r0
 80008b0:	3568      	adds	r5, #104	@ 0x68
 80008b2:	e7e9      	b.n	8000888 <_fwalk_sglue+0x10>

080008b4 <iprintf>:
 80008b4:	b40f      	push	{r0, r1, r2, r3}
 80008b6:	b507      	push	{r0, r1, r2, lr}
 80008b8:	4906      	ldr	r1, [pc, #24]	@ (80008d4 <iprintf+0x20>)
 80008ba:	ab04      	add	r3, sp, #16
 80008bc:	6808      	ldr	r0, [r1, #0]
 80008be:	f853 2b04 	ldr.w	r2, [r3], #4
 80008c2:	6881      	ldr	r1, [r0, #8]
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	f000 fadb 	bl	8000e80 <_vfiprintf_r>
 80008ca:	b003      	add	sp, #12
 80008cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80008d0:	b004      	add	sp, #16
 80008d2:	4770      	bx	lr
 80008d4:	2000000c 	.word	0x2000000c

080008d8 <_puts_r>:
 80008d8:	6a03      	ldr	r3, [r0, #32]
 80008da:	b570      	push	{r4, r5, r6, lr}
 80008dc:	6884      	ldr	r4, [r0, #8]
 80008de:	4605      	mov	r5, r0
 80008e0:	460e      	mov	r6, r1
 80008e2:	b90b      	cbnz	r3, 80008e8 <_puts_r+0x10>
 80008e4:	f7ff ffb0 	bl	8000848 <__sinit>
 80008e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80008ea:	07db      	lsls	r3, r3, #31
 80008ec:	d405      	bmi.n	80008fa <_puts_r+0x22>
 80008ee:	89a3      	ldrh	r3, [r4, #12]
 80008f0:	0598      	lsls	r0, r3, #22
 80008f2:	d402      	bmi.n	80008fa <_puts_r+0x22>
 80008f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008f6:	f000 f99e 	bl	8000c36 <__retarget_lock_acquire_recursive>
 80008fa:	89a3      	ldrh	r3, [r4, #12]
 80008fc:	0719      	lsls	r1, r3, #28
 80008fe:	d502      	bpl.n	8000906 <_puts_r+0x2e>
 8000900:	6923      	ldr	r3, [r4, #16]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d135      	bne.n	8000972 <_puts_r+0x9a>
 8000906:	4621      	mov	r1, r4
 8000908:	4628      	mov	r0, r5
 800090a:	f000 f8c5 	bl	8000a98 <__swsetup_r>
 800090e:	b380      	cbz	r0, 8000972 <_puts_r+0x9a>
 8000910:	f04f 35ff 	mov.w	r5, #4294967295
 8000914:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000916:	07da      	lsls	r2, r3, #31
 8000918:	d405      	bmi.n	8000926 <_puts_r+0x4e>
 800091a:	89a3      	ldrh	r3, [r4, #12]
 800091c:	059b      	lsls	r3, r3, #22
 800091e:	d402      	bmi.n	8000926 <_puts_r+0x4e>
 8000920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000922:	f000 f989 	bl	8000c38 <__retarget_lock_release_recursive>
 8000926:	4628      	mov	r0, r5
 8000928:	bd70      	pop	{r4, r5, r6, pc}
 800092a:	2b00      	cmp	r3, #0
 800092c:	da04      	bge.n	8000938 <_puts_r+0x60>
 800092e:	69a2      	ldr	r2, [r4, #24]
 8000930:	429a      	cmp	r2, r3
 8000932:	dc17      	bgt.n	8000964 <_puts_r+0x8c>
 8000934:	290a      	cmp	r1, #10
 8000936:	d015      	beq.n	8000964 <_puts_r+0x8c>
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	6022      	str	r2, [r4, #0]
 800093e:	7019      	strb	r1, [r3, #0]
 8000940:	68a3      	ldr	r3, [r4, #8]
 8000942:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000946:	3b01      	subs	r3, #1
 8000948:	60a3      	str	r3, [r4, #8]
 800094a:	2900      	cmp	r1, #0
 800094c:	d1ed      	bne.n	800092a <_puts_r+0x52>
 800094e:	2b00      	cmp	r3, #0
 8000950:	da11      	bge.n	8000976 <_puts_r+0x9e>
 8000952:	4622      	mov	r2, r4
 8000954:	210a      	movs	r1, #10
 8000956:	4628      	mov	r0, r5
 8000958:	f000 f85f 	bl	8000a1a <__swbuf_r>
 800095c:	3001      	adds	r0, #1
 800095e:	d0d7      	beq.n	8000910 <_puts_r+0x38>
 8000960:	250a      	movs	r5, #10
 8000962:	e7d7      	b.n	8000914 <_puts_r+0x3c>
 8000964:	4622      	mov	r2, r4
 8000966:	4628      	mov	r0, r5
 8000968:	f000 f857 	bl	8000a1a <__swbuf_r>
 800096c:	3001      	adds	r0, #1
 800096e:	d1e7      	bne.n	8000940 <_puts_r+0x68>
 8000970:	e7ce      	b.n	8000910 <_puts_r+0x38>
 8000972:	3e01      	subs	r6, #1
 8000974:	e7e4      	b.n	8000940 <_puts_r+0x68>
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	6022      	str	r2, [r4, #0]
 800097c:	220a      	movs	r2, #10
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e7ee      	b.n	8000960 <_puts_r+0x88>
	...

08000984 <puts>:
 8000984:	4b02      	ldr	r3, [pc, #8]	@ (8000990 <puts+0xc>)
 8000986:	4601      	mov	r1, r0
 8000988:	6818      	ldr	r0, [r3, #0]
 800098a:	f7ff bfa5 	b.w	80008d8 <_puts_r>
 800098e:	bf00      	nop
 8000990:	2000000c 	.word	0x2000000c

08000994 <__sread>:
 8000994:	b510      	push	{r4, lr}
 8000996:	460c      	mov	r4, r1
 8000998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800099c:	f000 f8fc 	bl	8000b98 <_read_r>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	bfab      	itete	ge
 80009a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80009a6:	89a3      	ldrhlt	r3, [r4, #12]
 80009a8:	181b      	addge	r3, r3, r0
 80009aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80009ae:	bfac      	ite	ge
 80009b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80009b2:	81a3      	strhlt	r3, [r4, #12]
 80009b4:	bd10      	pop	{r4, pc}

080009b6 <__swrite>:
 80009b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ba:	461f      	mov	r7, r3
 80009bc:	898b      	ldrh	r3, [r1, #12]
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	4605      	mov	r5, r0
 80009c2:	460c      	mov	r4, r1
 80009c4:	4616      	mov	r6, r2
 80009c6:	d505      	bpl.n	80009d4 <__swrite+0x1e>
 80009c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009cc:	2302      	movs	r3, #2
 80009ce:	2200      	movs	r2, #0
 80009d0:	f000 f8d0 	bl	8000b74 <_lseek_r>
 80009d4:	89a3      	ldrh	r3, [r4, #12]
 80009d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009de:	81a3      	strh	r3, [r4, #12]
 80009e0:	4632      	mov	r2, r6
 80009e2:	463b      	mov	r3, r7
 80009e4:	4628      	mov	r0, r5
 80009e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009ea:	f000 b8e7 	b.w	8000bbc <_write_r>

080009ee <__sseek>:
 80009ee:	b510      	push	{r4, lr}
 80009f0:	460c      	mov	r4, r1
 80009f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f6:	f000 f8bd 	bl	8000b74 <_lseek_r>
 80009fa:	1c43      	adds	r3, r0, #1
 80009fc:	89a3      	ldrh	r3, [r4, #12]
 80009fe:	bf15      	itete	ne
 8000a00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a0a:	81a3      	strheq	r3, [r4, #12]
 8000a0c:	bf18      	it	ne
 8000a0e:	81a3      	strhne	r3, [r4, #12]
 8000a10:	bd10      	pop	{r4, pc}

08000a12 <__sclose>:
 8000a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a16:	f000 b89d 	b.w	8000b54 <_close_r>

08000a1a <__swbuf_r>:
 8000a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1c:	460e      	mov	r6, r1
 8000a1e:	4614      	mov	r4, r2
 8000a20:	4605      	mov	r5, r0
 8000a22:	b118      	cbz	r0, 8000a2c <__swbuf_r+0x12>
 8000a24:	6a03      	ldr	r3, [r0, #32]
 8000a26:	b90b      	cbnz	r3, 8000a2c <__swbuf_r+0x12>
 8000a28:	f7ff ff0e 	bl	8000848 <__sinit>
 8000a2c:	69a3      	ldr	r3, [r4, #24]
 8000a2e:	60a3      	str	r3, [r4, #8]
 8000a30:	89a3      	ldrh	r3, [r4, #12]
 8000a32:	071a      	lsls	r2, r3, #28
 8000a34:	d501      	bpl.n	8000a3a <__swbuf_r+0x20>
 8000a36:	6923      	ldr	r3, [r4, #16]
 8000a38:	b943      	cbnz	r3, 8000a4c <__swbuf_r+0x32>
 8000a3a:	4621      	mov	r1, r4
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	f000 f82b 	bl	8000a98 <__swsetup_r>
 8000a42:	b118      	cbz	r0, 8000a4c <__swbuf_r+0x32>
 8000a44:	f04f 37ff 	mov.w	r7, #4294967295
 8000a48:	4638      	mov	r0, r7
 8000a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	6922      	ldr	r2, [r4, #16]
 8000a50:	1a98      	subs	r0, r3, r2
 8000a52:	6963      	ldr	r3, [r4, #20]
 8000a54:	b2f6      	uxtb	r6, r6
 8000a56:	4283      	cmp	r3, r0
 8000a58:	4637      	mov	r7, r6
 8000a5a:	dc05      	bgt.n	8000a68 <__swbuf_r+0x4e>
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f000 fd38 	bl	80014d4 <_fflush_r>
 8000a64:	2800      	cmp	r0, #0
 8000a66:	d1ed      	bne.n	8000a44 <__swbuf_r+0x2a>
 8000a68:	68a3      	ldr	r3, [r4, #8]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	60a3      	str	r3, [r4, #8]
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	6022      	str	r2, [r4, #0]
 8000a74:	701e      	strb	r6, [r3, #0]
 8000a76:	6962      	ldr	r2, [r4, #20]
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d004      	beq.n	8000a88 <__swbuf_r+0x6e>
 8000a7e:	89a3      	ldrh	r3, [r4, #12]
 8000a80:	07db      	lsls	r3, r3, #31
 8000a82:	d5e1      	bpl.n	8000a48 <__swbuf_r+0x2e>
 8000a84:	2e0a      	cmp	r6, #10
 8000a86:	d1df      	bne.n	8000a48 <__swbuf_r+0x2e>
 8000a88:	4621      	mov	r1, r4
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 fd22 	bl	80014d4 <_fflush_r>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d0d9      	beq.n	8000a48 <__swbuf_r+0x2e>
 8000a94:	e7d6      	b.n	8000a44 <__swbuf_r+0x2a>
	...

08000a98 <__swsetup_r>:
 8000a98:	b538      	push	{r3, r4, r5, lr}
 8000a9a:	4b29      	ldr	r3, [pc, #164]	@ (8000b40 <__swsetup_r+0xa8>)
 8000a9c:	4605      	mov	r5, r0
 8000a9e:	6818      	ldr	r0, [r3, #0]
 8000aa0:	460c      	mov	r4, r1
 8000aa2:	b118      	cbz	r0, 8000aac <__swsetup_r+0x14>
 8000aa4:	6a03      	ldr	r3, [r0, #32]
 8000aa6:	b90b      	cbnz	r3, 8000aac <__swsetup_r+0x14>
 8000aa8:	f7ff fece 	bl	8000848 <__sinit>
 8000aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ab0:	0719      	lsls	r1, r3, #28
 8000ab2:	d422      	bmi.n	8000afa <__swsetup_r+0x62>
 8000ab4:	06da      	lsls	r2, r3, #27
 8000ab6:	d407      	bmi.n	8000ac8 <__swsetup_r+0x30>
 8000ab8:	2209      	movs	r2, #9
 8000aba:	602a      	str	r2, [r5, #0]
 8000abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ac0:	81a3      	strh	r3, [r4, #12]
 8000ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac6:	e033      	b.n	8000b30 <__swsetup_r+0x98>
 8000ac8:	0758      	lsls	r0, r3, #29
 8000aca:	d512      	bpl.n	8000af2 <__swsetup_r+0x5a>
 8000acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ace:	b141      	cbz	r1, 8000ae2 <__swsetup_r+0x4a>
 8000ad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d002      	beq.n	8000ade <__swsetup_r+0x46>
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f000 f8af 	bl	8000c3c <_free_r>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000ae2:	89a3      	ldrh	r3, [r4, #12]
 8000ae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000ae8:	81a3      	strh	r3, [r4, #12]
 8000aea:	2300      	movs	r3, #0
 8000aec:	6063      	str	r3, [r4, #4]
 8000aee:	6923      	ldr	r3, [r4, #16]
 8000af0:	6023      	str	r3, [r4, #0]
 8000af2:	89a3      	ldrh	r3, [r4, #12]
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	81a3      	strh	r3, [r4, #12]
 8000afa:	6923      	ldr	r3, [r4, #16]
 8000afc:	b94b      	cbnz	r3, 8000b12 <__swsetup_r+0x7a>
 8000afe:	89a3      	ldrh	r3, [r4, #12]
 8000b00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b08:	d003      	beq.n	8000b12 <__swsetup_r+0x7a>
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f000 fd2f 	bl	8001570 <__smakebuf_r>
 8000b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b16:	f013 0201 	ands.w	r2, r3, #1
 8000b1a:	d00a      	beq.n	8000b32 <__swsetup_r+0x9a>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60a2      	str	r2, [r4, #8]
 8000b20:	6962      	ldr	r2, [r4, #20]
 8000b22:	4252      	negs	r2, r2
 8000b24:	61a2      	str	r2, [r4, #24]
 8000b26:	6922      	ldr	r2, [r4, #16]
 8000b28:	b942      	cbnz	r2, 8000b3c <__swsetup_r+0xa4>
 8000b2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000b2e:	d1c5      	bne.n	8000abc <__swsetup_r+0x24>
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	0799      	lsls	r1, r3, #30
 8000b34:	bf58      	it	pl
 8000b36:	6962      	ldrpl	r2, [r4, #20]
 8000b38:	60a2      	str	r2, [r4, #8]
 8000b3a:	e7f4      	b.n	8000b26 <__swsetup_r+0x8e>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e7f7      	b.n	8000b30 <__swsetup_r+0x98>
 8000b40:	2000000c 	.word	0x2000000c

08000b44 <memset>:
 8000b44:	4402      	add	r2, r0
 8000b46:	4603      	mov	r3, r0
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <memset+0xa>
 8000b4c:	4770      	bx	lr
 8000b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8000b52:	e7f9      	b.n	8000b48 <memset+0x4>

08000b54 <_close_r>:
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	4d06      	ldr	r5, [pc, #24]	@ (8000b70 <_close_r+0x1c>)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	602b      	str	r3, [r5, #0]
 8000b60:	f7ff fd52 	bl	8000608 <_close>
 8000b64:	1c43      	adds	r3, r0, #1
 8000b66:	d102      	bne.n	8000b6e <_close_r+0x1a>
 8000b68:	682b      	ldr	r3, [r5, #0]
 8000b6a:	b103      	cbz	r3, 8000b6e <_close_r+0x1a>
 8000b6c:	6023      	str	r3, [r4, #0]
 8000b6e:	bd38      	pop	{r3, r4, r5, pc}
 8000b70:	200001b8 	.word	0x200001b8

08000b74 <_lseek_r>:
 8000b74:	b538      	push	{r3, r4, r5, lr}
 8000b76:	4d07      	ldr	r5, [pc, #28]	@ (8000b94 <_lseek_r+0x20>)
 8000b78:	4604      	mov	r4, r0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	2200      	movs	r2, #0
 8000b80:	602a      	str	r2, [r5, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	f7ff fd67 	bl	8000656 <_lseek>
 8000b88:	1c43      	adds	r3, r0, #1
 8000b8a:	d102      	bne.n	8000b92 <_lseek_r+0x1e>
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	b103      	cbz	r3, 8000b92 <_lseek_r+0x1e>
 8000b90:	6023      	str	r3, [r4, #0]
 8000b92:	bd38      	pop	{r3, r4, r5, pc}
 8000b94:	200001b8 	.word	0x200001b8

08000b98 <_read_r>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	4d07      	ldr	r5, [pc, #28]	@ (8000bb8 <_read_r+0x20>)
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	602a      	str	r2, [r5, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f7ff fcd4 	bl	8000554 <_read>
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	d102      	bne.n	8000bb6 <_read_r+0x1e>
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	b103      	cbz	r3, 8000bb6 <_read_r+0x1e>
 8000bb4:	6023      	str	r3, [r4, #0]
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
 8000bb8:	200001b8 	.word	0x200001b8

08000bbc <_write_r>:
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4d07      	ldr	r5, [pc, #28]	@ (8000bdc <_write_r+0x20>)
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	602a      	str	r2, [r5, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f7ff fca6 	bl	800051c <_write>
 8000bd0:	1c43      	adds	r3, r0, #1
 8000bd2:	d102      	bne.n	8000bda <_write_r+0x1e>
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	b103      	cbz	r3, 8000bda <_write_r+0x1e>
 8000bd8:	6023      	str	r3, [r4, #0]
 8000bda:	bd38      	pop	{r3, r4, r5, pc}
 8000bdc:	200001b8 	.word	0x200001b8

08000be0 <__errno>:
 8000be0:	4b01      	ldr	r3, [pc, #4]	@ (8000be8 <__errno+0x8>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000000c 	.word	0x2000000c

08000bec <__libc_init_array>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	4d0d      	ldr	r5, [pc, #52]	@ (8000c24 <__libc_init_array+0x38>)
 8000bf0:	4c0d      	ldr	r4, [pc, #52]	@ (8000c28 <__libc_init_array+0x3c>)
 8000bf2:	1b64      	subs	r4, r4, r5
 8000bf4:	10a4      	asrs	r4, r4, #2
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	42a6      	cmp	r6, r4
 8000bfa:	d109      	bne.n	8000c10 <__libc_init_array+0x24>
 8000bfc:	4d0b      	ldr	r5, [pc, #44]	@ (8000c2c <__libc_init_array+0x40>)
 8000bfe:	4c0c      	ldr	r4, [pc, #48]	@ (8000c30 <__libc_init_array+0x44>)
 8000c00:	f000 fd24 	bl	800164c <_init>
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	10a4      	asrs	r4, r4, #2
 8000c08:	2600      	movs	r6, #0
 8000c0a:	42a6      	cmp	r6, r4
 8000c0c:	d105      	bne.n	8000c1a <__libc_init_array+0x2e>
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c14:	4798      	blx	r3
 8000c16:	3601      	adds	r6, #1
 8000c18:	e7ee      	b.n	8000bf8 <__libc_init_array+0xc>
 8000c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c1e:	4798      	blx	r3
 8000c20:	3601      	adds	r6, #1
 8000c22:	e7f2      	b.n	8000c0a <__libc_init_array+0x1e>
 8000c24:	080017dc 	.word	0x080017dc
 8000c28:	080017dc 	.word	0x080017dc
 8000c2c:	080017dc 	.word	0x080017dc
 8000c30:	080017e0 	.word	0x080017e0

08000c34 <__retarget_lock_init_recursive>:
 8000c34:	4770      	bx	lr

08000c36 <__retarget_lock_acquire_recursive>:
 8000c36:	4770      	bx	lr

08000c38 <__retarget_lock_release_recursive>:
 8000c38:	4770      	bx	lr
	...

08000c3c <_free_r>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	4605      	mov	r5, r0
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d041      	beq.n	8000cc8 <_free_r+0x8c>
 8000c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c48:	1f0c      	subs	r4, r1, #4
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bfb8      	it	lt
 8000c4e:	18e4      	addlt	r4, r4, r3
 8000c50:	f000 f8e0 	bl	8000e14 <__malloc_lock>
 8000c54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ccc <_free_r+0x90>)
 8000c56:	6813      	ldr	r3, [r2, #0]
 8000c58:	b933      	cbnz	r3, 8000c68 <_free_r+0x2c>
 8000c5a:	6063      	str	r3, [r4, #4]
 8000c5c:	6014      	str	r4, [r2, #0]
 8000c5e:	4628      	mov	r0, r5
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b8dc 	b.w	8000e20 <__malloc_unlock>
 8000c68:	42a3      	cmp	r3, r4
 8000c6a:	d908      	bls.n	8000c7e <_free_r+0x42>
 8000c6c:	6820      	ldr	r0, [r4, #0]
 8000c6e:	1821      	adds	r1, r4, r0
 8000c70:	428b      	cmp	r3, r1
 8000c72:	bf01      	itttt	eq
 8000c74:	6819      	ldreq	r1, [r3, #0]
 8000c76:	685b      	ldreq	r3, [r3, #4]
 8000c78:	1809      	addeq	r1, r1, r0
 8000c7a:	6021      	streq	r1, [r4, #0]
 8000c7c:	e7ed      	b.n	8000c5a <_free_r+0x1e>
 8000c7e:	461a      	mov	r2, r3
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	b10b      	cbz	r3, 8000c88 <_free_r+0x4c>
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d9fa      	bls.n	8000c7e <_free_r+0x42>
 8000c88:	6811      	ldr	r1, [r2, #0]
 8000c8a:	1850      	adds	r0, r2, r1
 8000c8c:	42a0      	cmp	r0, r4
 8000c8e:	d10b      	bne.n	8000ca8 <_free_r+0x6c>
 8000c90:	6820      	ldr	r0, [r4, #0]
 8000c92:	4401      	add	r1, r0
 8000c94:	1850      	adds	r0, r2, r1
 8000c96:	4283      	cmp	r3, r0
 8000c98:	6011      	str	r1, [r2, #0]
 8000c9a:	d1e0      	bne.n	8000c5e <_free_r+0x22>
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	6053      	str	r3, [r2, #4]
 8000ca2:	4408      	add	r0, r1
 8000ca4:	6010      	str	r0, [r2, #0]
 8000ca6:	e7da      	b.n	8000c5e <_free_r+0x22>
 8000ca8:	d902      	bls.n	8000cb0 <_free_r+0x74>
 8000caa:	230c      	movs	r3, #12
 8000cac:	602b      	str	r3, [r5, #0]
 8000cae:	e7d6      	b.n	8000c5e <_free_r+0x22>
 8000cb0:	6820      	ldr	r0, [r4, #0]
 8000cb2:	1821      	adds	r1, r4, r0
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	bf04      	itt	eq
 8000cb8:	6819      	ldreq	r1, [r3, #0]
 8000cba:	685b      	ldreq	r3, [r3, #4]
 8000cbc:	6063      	str	r3, [r4, #4]
 8000cbe:	bf04      	itt	eq
 8000cc0:	1809      	addeq	r1, r1, r0
 8000cc2:	6021      	streq	r1, [r4, #0]
 8000cc4:	6054      	str	r4, [r2, #4]
 8000cc6:	e7ca      	b.n	8000c5e <_free_r+0x22>
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001c4 	.word	0x200001c4

08000cd0 <sbrk_aligned>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4e0f      	ldr	r6, [pc, #60]	@ (8000d10 <sbrk_aligned+0x40>)
 8000cd4:	460c      	mov	r4, r1
 8000cd6:	6831      	ldr	r1, [r6, #0]
 8000cd8:	4605      	mov	r5, r0
 8000cda:	b911      	cbnz	r1, 8000ce2 <sbrk_aligned+0x12>
 8000cdc:	f000 fca6 	bl	800162c <_sbrk_r>
 8000ce0:	6030      	str	r0, [r6, #0]
 8000ce2:	4621      	mov	r1, r4
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f000 fca1 	bl	800162c <_sbrk_r>
 8000cea:	1c43      	adds	r3, r0, #1
 8000cec:	d103      	bne.n	8000cf6 <sbrk_aligned+0x26>
 8000cee:	f04f 34ff 	mov.w	r4, #4294967295
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	bd70      	pop	{r4, r5, r6, pc}
 8000cf6:	1cc4      	adds	r4, r0, #3
 8000cf8:	f024 0403 	bic.w	r4, r4, #3
 8000cfc:	42a0      	cmp	r0, r4
 8000cfe:	d0f8      	beq.n	8000cf2 <sbrk_aligned+0x22>
 8000d00:	1a21      	subs	r1, r4, r0
 8000d02:	4628      	mov	r0, r5
 8000d04:	f000 fc92 	bl	800162c <_sbrk_r>
 8000d08:	3001      	adds	r0, #1
 8000d0a:	d1f2      	bne.n	8000cf2 <sbrk_aligned+0x22>
 8000d0c:	e7ef      	b.n	8000cee <sbrk_aligned+0x1e>
 8000d0e:	bf00      	nop
 8000d10:	200001c0 	.word	0x200001c0

08000d14 <_malloc_r>:
 8000d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d18:	1ccd      	adds	r5, r1, #3
 8000d1a:	f025 0503 	bic.w	r5, r5, #3
 8000d1e:	3508      	adds	r5, #8
 8000d20:	2d0c      	cmp	r5, #12
 8000d22:	bf38      	it	cc
 8000d24:	250c      	movcc	r5, #12
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	4606      	mov	r6, r0
 8000d2a:	db01      	blt.n	8000d30 <_malloc_r+0x1c>
 8000d2c:	42a9      	cmp	r1, r5
 8000d2e:	d904      	bls.n	8000d3a <_malloc_r+0x26>
 8000d30:	230c      	movs	r3, #12
 8000d32:	6033      	str	r3, [r6, #0]
 8000d34:	2000      	movs	r0, #0
 8000d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e10 <_malloc_r+0xfc>
 8000d3e:	f000 f869 	bl	8000e14 <__malloc_lock>
 8000d42:	f8d8 3000 	ldr.w	r3, [r8]
 8000d46:	461c      	mov	r4, r3
 8000d48:	bb44      	cbnz	r4, 8000d9c <_malloc_r+0x88>
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	f7ff ffbf 	bl	8000cd0 <sbrk_aligned>
 8000d52:	1c43      	adds	r3, r0, #1
 8000d54:	4604      	mov	r4, r0
 8000d56:	d158      	bne.n	8000e0a <_malloc_r+0xf6>
 8000d58:	f8d8 4000 	ldr.w	r4, [r8]
 8000d5c:	4627      	mov	r7, r4
 8000d5e:	2f00      	cmp	r7, #0
 8000d60:	d143      	bne.n	8000dea <_malloc_r+0xd6>
 8000d62:	2c00      	cmp	r4, #0
 8000d64:	d04b      	beq.n	8000dfe <_malloc_r+0xea>
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	eb04 0903 	add.w	r9, r4, r3
 8000d70:	f000 fc5c 	bl	800162c <_sbrk_r>
 8000d74:	4581      	cmp	r9, r0
 8000d76:	d142      	bne.n	8000dfe <_malloc_r+0xea>
 8000d78:	6821      	ldr	r1, [r4, #0]
 8000d7a:	1a6d      	subs	r5, r5, r1
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f7ff ffa6 	bl	8000cd0 <sbrk_aligned>
 8000d84:	3001      	adds	r0, #1
 8000d86:	d03a      	beq.n	8000dfe <_malloc_r+0xea>
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	442b      	add	r3, r5
 8000d8c:	6023      	str	r3, [r4, #0]
 8000d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	bb62      	cbnz	r2, 8000df0 <_malloc_r+0xdc>
 8000d96:	f8c8 7000 	str.w	r7, [r8]
 8000d9a:	e00f      	b.n	8000dbc <_malloc_r+0xa8>
 8000d9c:	6822      	ldr	r2, [r4, #0]
 8000d9e:	1b52      	subs	r2, r2, r5
 8000da0:	d420      	bmi.n	8000de4 <_malloc_r+0xd0>
 8000da2:	2a0b      	cmp	r2, #11
 8000da4:	d917      	bls.n	8000dd6 <_malloc_r+0xc2>
 8000da6:	1961      	adds	r1, r4, r5
 8000da8:	42a3      	cmp	r3, r4
 8000daa:	6025      	str	r5, [r4, #0]
 8000dac:	bf18      	it	ne
 8000dae:	6059      	strne	r1, [r3, #4]
 8000db0:	6863      	ldr	r3, [r4, #4]
 8000db2:	bf08      	it	eq
 8000db4:	f8c8 1000 	streq.w	r1, [r8]
 8000db8:	5162      	str	r2, [r4, r5]
 8000dba:	604b      	str	r3, [r1, #4]
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	f000 f82f 	bl	8000e20 <__malloc_unlock>
 8000dc2:	f104 000b 	add.w	r0, r4, #11
 8000dc6:	1d23      	adds	r3, r4, #4
 8000dc8:	f020 0007 	bic.w	r0, r0, #7
 8000dcc:	1ac2      	subs	r2, r0, r3
 8000dce:	bf1c      	itt	ne
 8000dd0:	1a1b      	subne	r3, r3, r0
 8000dd2:	50a3      	strne	r3, [r4, r2]
 8000dd4:	e7af      	b.n	8000d36 <_malloc_r+0x22>
 8000dd6:	6862      	ldr	r2, [r4, #4]
 8000dd8:	42a3      	cmp	r3, r4
 8000dda:	bf0c      	ite	eq
 8000ddc:	f8c8 2000 	streq.w	r2, [r8]
 8000de0:	605a      	strne	r2, [r3, #4]
 8000de2:	e7eb      	b.n	8000dbc <_malloc_r+0xa8>
 8000de4:	4623      	mov	r3, r4
 8000de6:	6864      	ldr	r4, [r4, #4]
 8000de8:	e7ae      	b.n	8000d48 <_malloc_r+0x34>
 8000dea:	463c      	mov	r4, r7
 8000dec:	687f      	ldr	r7, [r7, #4]
 8000dee:	e7b6      	b.n	8000d5e <_malloc_r+0x4a>
 8000df0:	461a      	mov	r2, r3
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d1fb      	bne.n	8000df0 <_malloc_r+0xdc>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	6053      	str	r3, [r2, #4]
 8000dfc:	e7de      	b.n	8000dbc <_malloc_r+0xa8>
 8000dfe:	230c      	movs	r3, #12
 8000e00:	6033      	str	r3, [r6, #0]
 8000e02:	4630      	mov	r0, r6
 8000e04:	f000 f80c 	bl	8000e20 <__malloc_unlock>
 8000e08:	e794      	b.n	8000d34 <_malloc_r+0x20>
 8000e0a:	6005      	str	r5, [r0, #0]
 8000e0c:	e7d6      	b.n	8000dbc <_malloc_r+0xa8>
 8000e0e:	bf00      	nop
 8000e10:	200001c4 	.word	0x200001c4

08000e14 <__malloc_lock>:
 8000e14:	4801      	ldr	r0, [pc, #4]	@ (8000e1c <__malloc_lock+0x8>)
 8000e16:	f7ff bf0e 	b.w	8000c36 <__retarget_lock_acquire_recursive>
 8000e1a:	bf00      	nop
 8000e1c:	200001bc 	.word	0x200001bc

08000e20 <__malloc_unlock>:
 8000e20:	4801      	ldr	r0, [pc, #4]	@ (8000e28 <__malloc_unlock+0x8>)
 8000e22:	f7ff bf09 	b.w	8000c38 <__retarget_lock_release_recursive>
 8000e26:	bf00      	nop
 8000e28:	200001bc 	.word	0x200001bc

08000e2c <__sfputc_r>:
 8000e2c:	6893      	ldr	r3, [r2, #8]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	b410      	push	{r4}
 8000e34:	6093      	str	r3, [r2, #8]
 8000e36:	da08      	bge.n	8000e4a <__sfputc_r+0x1e>
 8000e38:	6994      	ldr	r4, [r2, #24]
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	db01      	blt.n	8000e42 <__sfputc_r+0x16>
 8000e3e:	290a      	cmp	r1, #10
 8000e40:	d103      	bne.n	8000e4a <__sfputc_r+0x1e>
 8000e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e46:	f7ff bde8 	b.w	8000a1a <__swbuf_r>
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	1c58      	adds	r0, r3, #1
 8000e4e:	6010      	str	r0, [r2, #0]
 8000e50:	7019      	strb	r1, [r3, #0]
 8000e52:	4608      	mov	r0, r1
 8000e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <__sfputs_r>:
 8000e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5c:	4606      	mov	r6, r0
 8000e5e:	460f      	mov	r7, r1
 8000e60:	4614      	mov	r4, r2
 8000e62:	18d5      	adds	r5, r2, r3
 8000e64:	42ac      	cmp	r4, r5
 8000e66:	d101      	bne.n	8000e6c <__sfputs_r+0x12>
 8000e68:	2000      	movs	r0, #0
 8000e6a:	e007      	b.n	8000e7c <__sfputs_r+0x22>
 8000e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e70:	463a      	mov	r2, r7
 8000e72:	4630      	mov	r0, r6
 8000e74:	f7ff ffda 	bl	8000e2c <__sfputc_r>
 8000e78:	1c43      	adds	r3, r0, #1
 8000e7a:	d1f3      	bne.n	8000e64 <__sfputs_r+0xa>
 8000e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e80 <_vfiprintf_r>:
 8000e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e84:	460d      	mov	r5, r1
 8000e86:	b09d      	sub	sp, #116	@ 0x74
 8000e88:	4614      	mov	r4, r2
 8000e8a:	4698      	mov	r8, r3
 8000e8c:	4606      	mov	r6, r0
 8000e8e:	b118      	cbz	r0, 8000e98 <_vfiprintf_r+0x18>
 8000e90:	6a03      	ldr	r3, [r0, #32]
 8000e92:	b90b      	cbnz	r3, 8000e98 <_vfiprintf_r+0x18>
 8000e94:	f7ff fcd8 	bl	8000848 <__sinit>
 8000e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e9a:	07d9      	lsls	r1, r3, #31
 8000e9c:	d405      	bmi.n	8000eaa <_vfiprintf_r+0x2a>
 8000e9e:	89ab      	ldrh	r3, [r5, #12]
 8000ea0:	059a      	lsls	r2, r3, #22
 8000ea2:	d402      	bmi.n	8000eaa <_vfiprintf_r+0x2a>
 8000ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ea6:	f7ff fec6 	bl	8000c36 <__retarget_lock_acquire_recursive>
 8000eaa:	89ab      	ldrh	r3, [r5, #12]
 8000eac:	071b      	lsls	r3, r3, #28
 8000eae:	d501      	bpl.n	8000eb4 <_vfiprintf_r+0x34>
 8000eb0:	692b      	ldr	r3, [r5, #16]
 8000eb2:	b99b      	cbnz	r3, 8000edc <_vfiprintf_r+0x5c>
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	f7ff fdee 	bl	8000a98 <__swsetup_r>
 8000ebc:	b170      	cbz	r0, 8000edc <_vfiprintf_r+0x5c>
 8000ebe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ec0:	07dc      	lsls	r4, r3, #31
 8000ec2:	d504      	bpl.n	8000ece <_vfiprintf_r+0x4e>
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	b01d      	add	sp, #116	@ 0x74
 8000eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ece:	89ab      	ldrh	r3, [r5, #12]
 8000ed0:	0598      	lsls	r0, r3, #22
 8000ed2:	d4f7      	bmi.n	8000ec4 <_vfiprintf_r+0x44>
 8000ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ed6:	f7ff feaf 	bl	8000c38 <__retarget_lock_release_recursive>
 8000eda:	e7f3      	b.n	8000ec4 <_vfiprintf_r+0x44>
 8000edc:	2300      	movs	r3, #0
 8000ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000eea:	2330      	movs	r3, #48	@ 0x30
 8000eec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800109c <_vfiprintf_r+0x21c>
 8000ef0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ef4:	f04f 0901 	mov.w	r9, #1
 8000ef8:	4623      	mov	r3, r4
 8000efa:	469a      	mov	sl, r3
 8000efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f00:	b10a      	cbz	r2, 8000f06 <_vfiprintf_r+0x86>
 8000f02:	2a25      	cmp	r2, #37	@ 0x25
 8000f04:	d1f9      	bne.n	8000efa <_vfiprintf_r+0x7a>
 8000f06:	ebba 0b04 	subs.w	fp, sl, r4
 8000f0a:	d00b      	beq.n	8000f24 <_vfiprintf_r+0xa4>
 8000f0c:	465b      	mov	r3, fp
 8000f0e:	4622      	mov	r2, r4
 8000f10:	4629      	mov	r1, r5
 8000f12:	4630      	mov	r0, r6
 8000f14:	f7ff ffa1 	bl	8000e5a <__sfputs_r>
 8000f18:	3001      	adds	r0, #1
 8000f1a:	f000 80a7 	beq.w	800106c <_vfiprintf_r+0x1ec>
 8000f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f20:	445a      	add	r2, fp
 8000f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f24:	f89a 3000 	ldrb.w	r3, [sl]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 809f 	beq.w	800106c <_vfiprintf_r+0x1ec>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f38:	f10a 0a01 	add.w	sl, sl, #1
 8000f3c:	9304      	str	r3, [sp, #16]
 8000f3e:	9307      	str	r3, [sp, #28]
 8000f40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000f44:	931a      	str	r3, [sp, #104]	@ 0x68
 8000f46:	4654      	mov	r4, sl
 8000f48:	2205      	movs	r2, #5
 8000f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f4e:	4853      	ldr	r0, [pc, #332]	@ (800109c <_vfiprintf_r+0x21c>)
 8000f50:	f7ff f946 	bl	80001e0 <memchr>
 8000f54:	9a04      	ldr	r2, [sp, #16]
 8000f56:	b9d8      	cbnz	r0, 8000f90 <_vfiprintf_r+0x110>
 8000f58:	06d1      	lsls	r1, r2, #27
 8000f5a:	bf44      	itt	mi
 8000f5c:	2320      	movmi	r3, #32
 8000f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f62:	0713      	lsls	r3, r2, #28
 8000f64:	bf44      	itt	mi
 8000f66:	232b      	movmi	r3, #43	@ 0x2b
 8000f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f72:	d015      	beq.n	8000fa0 <_vfiprintf_r+0x120>
 8000f74:	9a07      	ldr	r2, [sp, #28]
 8000f76:	4654      	mov	r4, sl
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f04f 0c0a 	mov.w	ip, #10
 8000f7e:	4621      	mov	r1, r4
 8000f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f84:	3b30      	subs	r3, #48	@ 0x30
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	d94b      	bls.n	8001022 <_vfiprintf_r+0x1a2>
 8000f8a:	b1b0      	cbz	r0, 8000fba <_vfiprintf_r+0x13a>
 8000f8c:	9207      	str	r2, [sp, #28]
 8000f8e:	e014      	b.n	8000fba <_vfiprintf_r+0x13a>
 8000f90:	eba0 0308 	sub.w	r3, r0, r8
 8000f94:	fa09 f303 	lsl.w	r3, r9, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	9304      	str	r3, [sp, #16]
 8000f9c:	46a2      	mov	sl, r4
 8000f9e:	e7d2      	b.n	8000f46 <_vfiprintf_r+0xc6>
 8000fa0:	9b03      	ldr	r3, [sp, #12]
 8000fa2:	1d19      	adds	r1, r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	9103      	str	r1, [sp, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bfbb      	ittet	lt
 8000fac:	425b      	neglt	r3, r3
 8000fae:	f042 0202 	orrlt.w	r2, r2, #2
 8000fb2:	9307      	strge	r3, [sp, #28]
 8000fb4:	9307      	strlt	r3, [sp, #28]
 8000fb6:	bfb8      	it	lt
 8000fb8:	9204      	strlt	r2, [sp, #16]
 8000fba:	7823      	ldrb	r3, [r4, #0]
 8000fbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fbe:	d10a      	bne.n	8000fd6 <_vfiprintf_r+0x156>
 8000fc0:	7863      	ldrb	r3, [r4, #1]
 8000fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fc4:	d132      	bne.n	800102c <_vfiprintf_r+0x1ac>
 8000fc6:	9b03      	ldr	r3, [sp, #12]
 8000fc8:	1d1a      	adds	r2, r3, #4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	9203      	str	r2, [sp, #12]
 8000fce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000fd2:	3402      	adds	r4, #2
 8000fd4:	9305      	str	r3, [sp, #20]
 8000fd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80010ac <_vfiprintf_r+0x22c>
 8000fda:	7821      	ldrb	r1, [r4, #0]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	4650      	mov	r0, sl
 8000fe0:	f7ff f8fe 	bl	80001e0 <memchr>
 8000fe4:	b138      	cbz	r0, 8000ff6 <_vfiprintf_r+0x176>
 8000fe6:	9b04      	ldr	r3, [sp, #16]
 8000fe8:	eba0 000a 	sub.w	r0, r0, sl
 8000fec:	2240      	movs	r2, #64	@ 0x40
 8000fee:	4082      	lsls	r2, r0
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	3401      	adds	r4, #1
 8000ff4:	9304      	str	r3, [sp, #16]
 8000ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ffa:	4829      	ldr	r0, [pc, #164]	@ (80010a0 <_vfiprintf_r+0x220>)
 8000ffc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001000:	2206      	movs	r2, #6
 8001002:	f7ff f8ed 	bl	80001e0 <memchr>
 8001006:	2800      	cmp	r0, #0
 8001008:	d03f      	beq.n	800108a <_vfiprintf_r+0x20a>
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <_vfiprintf_r+0x224>)
 800100c:	bb1b      	cbnz	r3, 8001056 <_vfiprintf_r+0x1d6>
 800100e:	9b03      	ldr	r3, [sp, #12]
 8001010:	3307      	adds	r3, #7
 8001012:	f023 0307 	bic.w	r3, r3, #7
 8001016:	3308      	adds	r3, #8
 8001018:	9303      	str	r3, [sp, #12]
 800101a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800101c:	443b      	add	r3, r7
 800101e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001020:	e76a      	b.n	8000ef8 <_vfiprintf_r+0x78>
 8001022:	fb0c 3202 	mla	r2, ip, r2, r3
 8001026:	460c      	mov	r4, r1
 8001028:	2001      	movs	r0, #1
 800102a:	e7a8      	b.n	8000f7e <_vfiprintf_r+0xfe>
 800102c:	2300      	movs	r3, #0
 800102e:	3401      	adds	r4, #1
 8001030:	9305      	str	r3, [sp, #20]
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 0c0a 	mov.w	ip, #10
 8001038:	4620      	mov	r0, r4
 800103a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800103e:	3a30      	subs	r2, #48	@ 0x30
 8001040:	2a09      	cmp	r2, #9
 8001042:	d903      	bls.n	800104c <_vfiprintf_r+0x1cc>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0c6      	beq.n	8000fd6 <_vfiprintf_r+0x156>
 8001048:	9105      	str	r1, [sp, #20]
 800104a:	e7c4      	b.n	8000fd6 <_vfiprintf_r+0x156>
 800104c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001050:	4604      	mov	r4, r0
 8001052:	2301      	movs	r3, #1
 8001054:	e7f0      	b.n	8001038 <_vfiprintf_r+0x1b8>
 8001056:	ab03      	add	r3, sp, #12
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	462a      	mov	r2, r5
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <_vfiprintf_r+0x228>)
 800105e:	a904      	add	r1, sp, #16
 8001060:	4630      	mov	r0, r6
 8001062:	f3af 8000 	nop.w
 8001066:	4607      	mov	r7, r0
 8001068:	1c78      	adds	r0, r7, #1
 800106a:	d1d6      	bne.n	800101a <_vfiprintf_r+0x19a>
 800106c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800106e:	07d9      	lsls	r1, r3, #31
 8001070:	d405      	bmi.n	800107e <_vfiprintf_r+0x1fe>
 8001072:	89ab      	ldrh	r3, [r5, #12]
 8001074:	059a      	lsls	r2, r3, #22
 8001076:	d402      	bmi.n	800107e <_vfiprintf_r+0x1fe>
 8001078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800107a:	f7ff fddd 	bl	8000c38 <__retarget_lock_release_recursive>
 800107e:	89ab      	ldrh	r3, [r5, #12]
 8001080:	065b      	lsls	r3, r3, #25
 8001082:	f53f af1f 	bmi.w	8000ec4 <_vfiprintf_r+0x44>
 8001086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001088:	e71e      	b.n	8000ec8 <_vfiprintf_r+0x48>
 800108a:	ab03      	add	r3, sp, #12
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	462a      	mov	r2, r5
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <_vfiprintf_r+0x228>)
 8001092:	a904      	add	r1, sp, #16
 8001094:	4630      	mov	r0, r6
 8001096:	f000 f879 	bl	800118c <_printf_i>
 800109a:	e7e4      	b.n	8001066 <_vfiprintf_r+0x1e6>
 800109c:	0800179e 	.word	0x0800179e
 80010a0:	080017a8 	.word	0x080017a8
 80010a4:	00000000 	.word	0x00000000
 80010a8:	08000e5b 	.word	0x08000e5b
 80010ac:	080017a4 	.word	0x080017a4

080010b0 <_printf_common>:
 80010b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b4:	4616      	mov	r6, r2
 80010b6:	4698      	mov	r8, r3
 80010b8:	688a      	ldr	r2, [r1, #8]
 80010ba:	690b      	ldr	r3, [r1, #16]
 80010bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80010c0:	4293      	cmp	r3, r2
 80010c2:	bfb8      	it	lt
 80010c4:	4613      	movlt	r3, r2
 80010c6:	6033      	str	r3, [r6, #0]
 80010c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80010cc:	4607      	mov	r7, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	b10a      	cbz	r2, 80010d6 <_printf_common+0x26>
 80010d2:	3301      	adds	r3, #1
 80010d4:	6033      	str	r3, [r6, #0]
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	0699      	lsls	r1, r3, #26
 80010da:	bf42      	ittt	mi
 80010dc:	6833      	ldrmi	r3, [r6, #0]
 80010de:	3302      	addmi	r3, #2
 80010e0:	6033      	strmi	r3, [r6, #0]
 80010e2:	6825      	ldr	r5, [r4, #0]
 80010e4:	f015 0506 	ands.w	r5, r5, #6
 80010e8:	d106      	bne.n	80010f8 <_printf_common+0x48>
 80010ea:	f104 0a19 	add.w	sl, r4, #25
 80010ee:	68e3      	ldr	r3, [r4, #12]
 80010f0:	6832      	ldr	r2, [r6, #0]
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	42ab      	cmp	r3, r5
 80010f6:	dc26      	bgt.n	8001146 <_printf_common+0x96>
 80010f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80010fc:	6822      	ldr	r2, [r4, #0]
 80010fe:	3b00      	subs	r3, #0
 8001100:	bf18      	it	ne
 8001102:	2301      	movne	r3, #1
 8001104:	0692      	lsls	r2, r2, #26
 8001106:	d42b      	bmi.n	8001160 <_printf_common+0xb0>
 8001108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800110c:	4641      	mov	r1, r8
 800110e:	4638      	mov	r0, r7
 8001110:	47c8      	blx	r9
 8001112:	3001      	adds	r0, #1
 8001114:	d01e      	beq.n	8001154 <_printf_common+0xa4>
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	6922      	ldr	r2, [r4, #16]
 800111a:	f003 0306 	and.w	r3, r3, #6
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf02      	ittt	eq
 8001122:	68e5      	ldreq	r5, [r4, #12]
 8001124:	6833      	ldreq	r3, [r6, #0]
 8001126:	1aed      	subeq	r5, r5, r3
 8001128:	68a3      	ldr	r3, [r4, #8]
 800112a:	bf0c      	ite	eq
 800112c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001130:	2500      	movne	r5, #0
 8001132:	4293      	cmp	r3, r2
 8001134:	bfc4      	itt	gt
 8001136:	1a9b      	subgt	r3, r3, r2
 8001138:	18ed      	addgt	r5, r5, r3
 800113a:	2600      	movs	r6, #0
 800113c:	341a      	adds	r4, #26
 800113e:	42b5      	cmp	r5, r6
 8001140:	d11a      	bne.n	8001178 <_printf_common+0xc8>
 8001142:	2000      	movs	r0, #0
 8001144:	e008      	b.n	8001158 <_printf_common+0xa8>
 8001146:	2301      	movs	r3, #1
 8001148:	4652      	mov	r2, sl
 800114a:	4641      	mov	r1, r8
 800114c:	4638      	mov	r0, r7
 800114e:	47c8      	blx	r9
 8001150:	3001      	adds	r0, #1
 8001152:	d103      	bne.n	800115c <_printf_common+0xac>
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115c:	3501      	adds	r5, #1
 800115e:	e7c6      	b.n	80010ee <_printf_common+0x3e>
 8001160:	18e1      	adds	r1, r4, r3
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	2030      	movs	r0, #48	@ 0x30
 8001166:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800116a:	4422      	add	r2, r4
 800116c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001170:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001174:	3302      	adds	r3, #2
 8001176:	e7c7      	b.n	8001108 <_printf_common+0x58>
 8001178:	2301      	movs	r3, #1
 800117a:	4622      	mov	r2, r4
 800117c:	4641      	mov	r1, r8
 800117e:	4638      	mov	r0, r7
 8001180:	47c8      	blx	r9
 8001182:	3001      	adds	r0, #1
 8001184:	d0e6      	beq.n	8001154 <_printf_common+0xa4>
 8001186:	3601      	adds	r6, #1
 8001188:	e7d9      	b.n	800113e <_printf_common+0x8e>
	...

0800118c <_printf_i>:
 800118c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001190:	7e0f      	ldrb	r7, [r1, #24]
 8001192:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001194:	2f78      	cmp	r7, #120	@ 0x78
 8001196:	4691      	mov	r9, r2
 8001198:	4680      	mov	r8, r0
 800119a:	460c      	mov	r4, r1
 800119c:	469a      	mov	sl, r3
 800119e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80011a2:	d807      	bhi.n	80011b4 <_printf_i+0x28>
 80011a4:	2f62      	cmp	r7, #98	@ 0x62
 80011a6:	d80a      	bhi.n	80011be <_printf_i+0x32>
 80011a8:	2f00      	cmp	r7, #0
 80011aa:	f000 80d2 	beq.w	8001352 <_printf_i+0x1c6>
 80011ae:	2f58      	cmp	r7, #88	@ 0x58
 80011b0:	f000 80b9 	beq.w	8001326 <_printf_i+0x19a>
 80011b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80011bc:	e03a      	b.n	8001234 <_printf_i+0xa8>
 80011be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80011c2:	2b15      	cmp	r3, #21
 80011c4:	d8f6      	bhi.n	80011b4 <_printf_i+0x28>
 80011c6:	a101      	add	r1, pc, #4	@ (adr r1, 80011cc <_printf_i+0x40>)
 80011c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011cc:	08001225 	.word	0x08001225
 80011d0:	08001239 	.word	0x08001239
 80011d4:	080011b5 	.word	0x080011b5
 80011d8:	080011b5 	.word	0x080011b5
 80011dc:	080011b5 	.word	0x080011b5
 80011e0:	080011b5 	.word	0x080011b5
 80011e4:	08001239 	.word	0x08001239
 80011e8:	080011b5 	.word	0x080011b5
 80011ec:	080011b5 	.word	0x080011b5
 80011f0:	080011b5 	.word	0x080011b5
 80011f4:	080011b5 	.word	0x080011b5
 80011f8:	08001339 	.word	0x08001339
 80011fc:	08001263 	.word	0x08001263
 8001200:	080012f3 	.word	0x080012f3
 8001204:	080011b5 	.word	0x080011b5
 8001208:	080011b5 	.word	0x080011b5
 800120c:	0800135b 	.word	0x0800135b
 8001210:	080011b5 	.word	0x080011b5
 8001214:	08001263 	.word	0x08001263
 8001218:	080011b5 	.word	0x080011b5
 800121c:	080011b5 	.word	0x080011b5
 8001220:	080012fb 	.word	0x080012fb
 8001224:	6833      	ldr	r3, [r6, #0]
 8001226:	1d1a      	adds	r2, r3, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6032      	str	r2, [r6, #0]
 800122c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001230:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001234:	2301      	movs	r3, #1
 8001236:	e09d      	b.n	8001374 <_printf_i+0x1e8>
 8001238:	6833      	ldr	r3, [r6, #0]
 800123a:	6820      	ldr	r0, [r4, #0]
 800123c:	1d19      	adds	r1, r3, #4
 800123e:	6031      	str	r1, [r6, #0]
 8001240:	0606      	lsls	r6, r0, #24
 8001242:	d501      	bpl.n	8001248 <_printf_i+0xbc>
 8001244:	681d      	ldr	r5, [r3, #0]
 8001246:	e003      	b.n	8001250 <_printf_i+0xc4>
 8001248:	0645      	lsls	r5, r0, #25
 800124a:	d5fb      	bpl.n	8001244 <_printf_i+0xb8>
 800124c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001250:	2d00      	cmp	r5, #0
 8001252:	da03      	bge.n	800125c <_printf_i+0xd0>
 8001254:	232d      	movs	r3, #45	@ 0x2d
 8001256:	426d      	negs	r5, r5
 8001258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800125c:	4859      	ldr	r0, [pc, #356]	@ (80013c4 <_printf_i+0x238>)
 800125e:	230a      	movs	r3, #10
 8001260:	e011      	b.n	8001286 <_printf_i+0xfa>
 8001262:	6821      	ldr	r1, [r4, #0]
 8001264:	6833      	ldr	r3, [r6, #0]
 8001266:	0608      	lsls	r0, r1, #24
 8001268:	f853 5b04 	ldr.w	r5, [r3], #4
 800126c:	d402      	bmi.n	8001274 <_printf_i+0xe8>
 800126e:	0649      	lsls	r1, r1, #25
 8001270:	bf48      	it	mi
 8001272:	b2ad      	uxthmi	r5, r5
 8001274:	2f6f      	cmp	r7, #111	@ 0x6f
 8001276:	4853      	ldr	r0, [pc, #332]	@ (80013c4 <_printf_i+0x238>)
 8001278:	6033      	str	r3, [r6, #0]
 800127a:	bf14      	ite	ne
 800127c:	230a      	movne	r3, #10
 800127e:	2308      	moveq	r3, #8
 8001280:	2100      	movs	r1, #0
 8001282:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001286:	6866      	ldr	r6, [r4, #4]
 8001288:	60a6      	str	r6, [r4, #8]
 800128a:	2e00      	cmp	r6, #0
 800128c:	bfa2      	ittt	ge
 800128e:	6821      	ldrge	r1, [r4, #0]
 8001290:	f021 0104 	bicge.w	r1, r1, #4
 8001294:	6021      	strge	r1, [r4, #0]
 8001296:	b90d      	cbnz	r5, 800129c <_printf_i+0x110>
 8001298:	2e00      	cmp	r6, #0
 800129a:	d04b      	beq.n	8001334 <_printf_i+0x1a8>
 800129c:	4616      	mov	r6, r2
 800129e:	fbb5 f1f3 	udiv	r1, r5, r3
 80012a2:	fb03 5711 	mls	r7, r3, r1, r5
 80012a6:	5dc7      	ldrb	r7, [r0, r7]
 80012a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80012ac:	462f      	mov	r7, r5
 80012ae:	42bb      	cmp	r3, r7
 80012b0:	460d      	mov	r5, r1
 80012b2:	d9f4      	bls.n	800129e <_printf_i+0x112>
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d10b      	bne.n	80012d0 <_printf_i+0x144>
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	07df      	lsls	r7, r3, #31
 80012bc:	d508      	bpl.n	80012d0 <_printf_i+0x144>
 80012be:	6923      	ldr	r3, [r4, #16]
 80012c0:	6861      	ldr	r1, [r4, #4]
 80012c2:	4299      	cmp	r1, r3
 80012c4:	bfde      	ittt	le
 80012c6:	2330      	movle	r3, #48	@ 0x30
 80012c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80012d0:	1b92      	subs	r2, r2, r6
 80012d2:	6122      	str	r2, [r4, #16]
 80012d4:	f8cd a000 	str.w	sl, [sp]
 80012d8:	464b      	mov	r3, r9
 80012da:	aa03      	add	r2, sp, #12
 80012dc:	4621      	mov	r1, r4
 80012de:	4640      	mov	r0, r8
 80012e0:	f7ff fee6 	bl	80010b0 <_printf_common>
 80012e4:	3001      	adds	r0, #1
 80012e6:	d14a      	bne.n	800137e <_printf_i+0x1f2>
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	b004      	add	sp, #16
 80012ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	6023      	str	r3, [r4, #0]
 80012fa:	4833      	ldr	r0, [pc, #204]	@ (80013c8 <_printf_i+0x23c>)
 80012fc:	2778      	movs	r7, #120	@ 0x78
 80012fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	6831      	ldr	r1, [r6, #0]
 8001306:	061f      	lsls	r7, r3, #24
 8001308:	f851 5b04 	ldr.w	r5, [r1], #4
 800130c:	d402      	bmi.n	8001314 <_printf_i+0x188>
 800130e:	065f      	lsls	r7, r3, #25
 8001310:	bf48      	it	mi
 8001312:	b2ad      	uxthmi	r5, r5
 8001314:	6031      	str	r1, [r6, #0]
 8001316:	07d9      	lsls	r1, r3, #31
 8001318:	bf44      	itt	mi
 800131a:	f043 0320 	orrmi.w	r3, r3, #32
 800131e:	6023      	strmi	r3, [r4, #0]
 8001320:	b11d      	cbz	r5, 800132a <_printf_i+0x19e>
 8001322:	2310      	movs	r3, #16
 8001324:	e7ac      	b.n	8001280 <_printf_i+0xf4>
 8001326:	4827      	ldr	r0, [pc, #156]	@ (80013c4 <_printf_i+0x238>)
 8001328:	e7e9      	b.n	80012fe <_printf_i+0x172>
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	f023 0320 	bic.w	r3, r3, #32
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	e7f6      	b.n	8001322 <_printf_i+0x196>
 8001334:	4616      	mov	r6, r2
 8001336:	e7bd      	b.n	80012b4 <_printf_i+0x128>
 8001338:	6833      	ldr	r3, [r6, #0]
 800133a:	6825      	ldr	r5, [r4, #0]
 800133c:	6961      	ldr	r1, [r4, #20]
 800133e:	1d18      	adds	r0, r3, #4
 8001340:	6030      	str	r0, [r6, #0]
 8001342:	062e      	lsls	r6, r5, #24
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	d501      	bpl.n	800134c <_printf_i+0x1c0>
 8001348:	6019      	str	r1, [r3, #0]
 800134a:	e002      	b.n	8001352 <_printf_i+0x1c6>
 800134c:	0668      	lsls	r0, r5, #25
 800134e:	d5fb      	bpl.n	8001348 <_printf_i+0x1bc>
 8001350:	8019      	strh	r1, [r3, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	6123      	str	r3, [r4, #16]
 8001356:	4616      	mov	r6, r2
 8001358:	e7bc      	b.n	80012d4 <_printf_i+0x148>
 800135a:	6833      	ldr	r3, [r6, #0]
 800135c:	1d1a      	adds	r2, r3, #4
 800135e:	6032      	str	r2, [r6, #0]
 8001360:	681e      	ldr	r6, [r3, #0]
 8001362:	6862      	ldr	r2, [r4, #4]
 8001364:	2100      	movs	r1, #0
 8001366:	4630      	mov	r0, r6
 8001368:	f7fe ff3a 	bl	80001e0 <memchr>
 800136c:	b108      	cbz	r0, 8001372 <_printf_i+0x1e6>
 800136e:	1b80      	subs	r0, r0, r6
 8001370:	6060      	str	r0, [r4, #4]
 8001372:	6863      	ldr	r3, [r4, #4]
 8001374:	6123      	str	r3, [r4, #16]
 8001376:	2300      	movs	r3, #0
 8001378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800137c:	e7aa      	b.n	80012d4 <_printf_i+0x148>
 800137e:	6923      	ldr	r3, [r4, #16]
 8001380:	4632      	mov	r2, r6
 8001382:	4649      	mov	r1, r9
 8001384:	4640      	mov	r0, r8
 8001386:	47d0      	blx	sl
 8001388:	3001      	adds	r0, #1
 800138a:	d0ad      	beq.n	80012e8 <_printf_i+0x15c>
 800138c:	6823      	ldr	r3, [r4, #0]
 800138e:	079b      	lsls	r3, r3, #30
 8001390:	d413      	bmi.n	80013ba <_printf_i+0x22e>
 8001392:	68e0      	ldr	r0, [r4, #12]
 8001394:	9b03      	ldr	r3, [sp, #12]
 8001396:	4298      	cmp	r0, r3
 8001398:	bfb8      	it	lt
 800139a:	4618      	movlt	r0, r3
 800139c:	e7a6      	b.n	80012ec <_printf_i+0x160>
 800139e:	2301      	movs	r3, #1
 80013a0:	4632      	mov	r2, r6
 80013a2:	4649      	mov	r1, r9
 80013a4:	4640      	mov	r0, r8
 80013a6:	47d0      	blx	sl
 80013a8:	3001      	adds	r0, #1
 80013aa:	d09d      	beq.n	80012e8 <_printf_i+0x15c>
 80013ac:	3501      	adds	r5, #1
 80013ae:	68e3      	ldr	r3, [r4, #12]
 80013b0:	9903      	ldr	r1, [sp, #12]
 80013b2:	1a5b      	subs	r3, r3, r1
 80013b4:	42ab      	cmp	r3, r5
 80013b6:	dcf2      	bgt.n	800139e <_printf_i+0x212>
 80013b8:	e7eb      	b.n	8001392 <_printf_i+0x206>
 80013ba:	2500      	movs	r5, #0
 80013bc:	f104 0619 	add.w	r6, r4, #25
 80013c0:	e7f5      	b.n	80013ae <_printf_i+0x222>
 80013c2:	bf00      	nop
 80013c4:	080017af 	.word	0x080017af
 80013c8:	080017c0 	.word	0x080017c0

080013cc <__sflush_r>:
 80013cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d4:	0716      	lsls	r6, r2, #28
 80013d6:	4605      	mov	r5, r0
 80013d8:	460c      	mov	r4, r1
 80013da:	d454      	bmi.n	8001486 <__sflush_r+0xba>
 80013dc:	684b      	ldr	r3, [r1, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dc02      	bgt.n	80013e8 <__sflush_r+0x1c>
 80013e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dd48      	ble.n	800147a <__sflush_r+0xae>
 80013e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013ea:	2e00      	cmp	r6, #0
 80013ec:	d045      	beq.n	800147a <__sflush_r+0xae>
 80013ee:	2300      	movs	r3, #0
 80013f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80013f4:	682f      	ldr	r7, [r5, #0]
 80013f6:	6a21      	ldr	r1, [r4, #32]
 80013f8:	602b      	str	r3, [r5, #0]
 80013fa:	d030      	beq.n	800145e <__sflush_r+0x92>
 80013fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	0759      	lsls	r1, r3, #29
 8001402:	d505      	bpl.n	8001410 <__sflush_r+0x44>
 8001404:	6863      	ldr	r3, [r4, #4]
 8001406:	1ad2      	subs	r2, r2, r3
 8001408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800140a:	b10b      	cbz	r3, 8001410 <__sflush_r+0x44>
 800140c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800140e:	1ad2      	subs	r2, r2, r3
 8001410:	2300      	movs	r3, #0
 8001412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001414:	6a21      	ldr	r1, [r4, #32]
 8001416:	4628      	mov	r0, r5
 8001418:	47b0      	blx	r6
 800141a:	1c43      	adds	r3, r0, #1
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	d106      	bne.n	800142e <__sflush_r+0x62>
 8001420:	6829      	ldr	r1, [r5, #0]
 8001422:	291d      	cmp	r1, #29
 8001424:	d82b      	bhi.n	800147e <__sflush_r+0xb2>
 8001426:	4a2a      	ldr	r2, [pc, #168]	@ (80014d0 <__sflush_r+0x104>)
 8001428:	410a      	asrs	r2, r1
 800142a:	07d6      	lsls	r6, r2, #31
 800142c:	d427      	bmi.n	800147e <__sflush_r+0xb2>
 800142e:	2200      	movs	r2, #0
 8001430:	6062      	str	r2, [r4, #4]
 8001432:	04d9      	lsls	r1, r3, #19
 8001434:	6922      	ldr	r2, [r4, #16]
 8001436:	6022      	str	r2, [r4, #0]
 8001438:	d504      	bpl.n	8001444 <__sflush_r+0x78>
 800143a:	1c42      	adds	r2, r0, #1
 800143c:	d101      	bne.n	8001442 <__sflush_r+0x76>
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	b903      	cbnz	r3, 8001444 <__sflush_r+0x78>
 8001442:	6560      	str	r0, [r4, #84]	@ 0x54
 8001444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001446:	602f      	str	r7, [r5, #0]
 8001448:	b1b9      	cbz	r1, 800147a <__sflush_r+0xae>
 800144a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800144e:	4299      	cmp	r1, r3
 8001450:	d002      	beq.n	8001458 <__sflush_r+0x8c>
 8001452:	4628      	mov	r0, r5
 8001454:	f7ff fbf2 	bl	8000c3c <_free_r>
 8001458:	2300      	movs	r3, #0
 800145a:	6363      	str	r3, [r4, #52]	@ 0x34
 800145c:	e00d      	b.n	800147a <__sflush_r+0xae>
 800145e:	2301      	movs	r3, #1
 8001460:	4628      	mov	r0, r5
 8001462:	47b0      	blx	r6
 8001464:	4602      	mov	r2, r0
 8001466:	1c50      	adds	r0, r2, #1
 8001468:	d1c9      	bne.n	80013fe <__sflush_r+0x32>
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0c6      	beq.n	80013fe <__sflush_r+0x32>
 8001470:	2b1d      	cmp	r3, #29
 8001472:	d001      	beq.n	8001478 <__sflush_r+0xac>
 8001474:	2b16      	cmp	r3, #22
 8001476:	d11e      	bne.n	80014b6 <__sflush_r+0xea>
 8001478:	602f      	str	r7, [r5, #0]
 800147a:	2000      	movs	r0, #0
 800147c:	e022      	b.n	80014c4 <__sflush_r+0xf8>
 800147e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001482:	b21b      	sxth	r3, r3
 8001484:	e01b      	b.n	80014be <__sflush_r+0xf2>
 8001486:	690f      	ldr	r7, [r1, #16]
 8001488:	2f00      	cmp	r7, #0
 800148a:	d0f6      	beq.n	800147a <__sflush_r+0xae>
 800148c:	0793      	lsls	r3, r2, #30
 800148e:	680e      	ldr	r6, [r1, #0]
 8001490:	bf08      	it	eq
 8001492:	694b      	ldreq	r3, [r1, #20]
 8001494:	600f      	str	r7, [r1, #0]
 8001496:	bf18      	it	ne
 8001498:	2300      	movne	r3, #0
 800149a:	eba6 0807 	sub.w	r8, r6, r7
 800149e:	608b      	str	r3, [r1, #8]
 80014a0:	f1b8 0f00 	cmp.w	r8, #0
 80014a4:	dde9      	ble.n	800147a <__sflush_r+0xae>
 80014a6:	6a21      	ldr	r1, [r4, #32]
 80014a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80014aa:	4643      	mov	r3, r8
 80014ac:	463a      	mov	r2, r7
 80014ae:	4628      	mov	r0, r5
 80014b0:	47b0      	blx	r6
 80014b2:	2800      	cmp	r0, #0
 80014b4:	dc08      	bgt.n	80014c8 <__sflush_r+0xfc>
 80014b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014be:	81a3      	strh	r3, [r4, #12]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014c8:	4407      	add	r7, r0
 80014ca:	eba8 0800 	sub.w	r8, r8, r0
 80014ce:	e7e7      	b.n	80014a0 <__sflush_r+0xd4>
 80014d0:	dfbffffe 	.word	0xdfbffffe

080014d4 <_fflush_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	690b      	ldr	r3, [r1, #16]
 80014d8:	4605      	mov	r5, r0
 80014da:	460c      	mov	r4, r1
 80014dc:	b913      	cbnz	r3, 80014e4 <_fflush_r+0x10>
 80014de:	2500      	movs	r5, #0
 80014e0:	4628      	mov	r0, r5
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
 80014e4:	b118      	cbz	r0, 80014ee <_fflush_r+0x1a>
 80014e6:	6a03      	ldr	r3, [r0, #32]
 80014e8:	b90b      	cbnz	r3, 80014ee <_fflush_r+0x1a>
 80014ea:	f7ff f9ad 	bl	8000848 <__sinit>
 80014ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f3      	beq.n	80014de <_fflush_r+0xa>
 80014f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80014f8:	07d0      	lsls	r0, r2, #31
 80014fa:	d404      	bmi.n	8001506 <_fflush_r+0x32>
 80014fc:	0599      	lsls	r1, r3, #22
 80014fe:	d402      	bmi.n	8001506 <_fflush_r+0x32>
 8001500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001502:	f7ff fb98 	bl	8000c36 <__retarget_lock_acquire_recursive>
 8001506:	4628      	mov	r0, r5
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff ff5f 	bl	80013cc <__sflush_r>
 800150e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001510:	07da      	lsls	r2, r3, #31
 8001512:	4605      	mov	r5, r0
 8001514:	d4e4      	bmi.n	80014e0 <_fflush_r+0xc>
 8001516:	89a3      	ldrh	r3, [r4, #12]
 8001518:	059b      	lsls	r3, r3, #22
 800151a:	d4e1      	bmi.n	80014e0 <_fflush_r+0xc>
 800151c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800151e:	f7ff fb8b 	bl	8000c38 <__retarget_lock_release_recursive>
 8001522:	e7dd      	b.n	80014e0 <_fflush_r+0xc>

08001524 <__swhatbuf_r>:
 8001524:	b570      	push	{r4, r5, r6, lr}
 8001526:	460c      	mov	r4, r1
 8001528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800152c:	2900      	cmp	r1, #0
 800152e:	b096      	sub	sp, #88	@ 0x58
 8001530:	4615      	mov	r5, r2
 8001532:	461e      	mov	r6, r3
 8001534:	da0d      	bge.n	8001552 <__swhatbuf_r+0x2e>
 8001536:	89a3      	ldrh	r3, [r4, #12]
 8001538:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	bf14      	ite	ne
 8001542:	2340      	movne	r3, #64	@ 0x40
 8001544:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001548:	2000      	movs	r0, #0
 800154a:	6031      	str	r1, [r6, #0]
 800154c:	602b      	str	r3, [r5, #0]
 800154e:	b016      	add	sp, #88	@ 0x58
 8001550:	bd70      	pop	{r4, r5, r6, pc}
 8001552:	466a      	mov	r2, sp
 8001554:	f000 f848 	bl	80015e8 <_fstat_r>
 8001558:	2800      	cmp	r0, #0
 800155a:	dbec      	blt.n	8001536 <__swhatbuf_r+0x12>
 800155c:	9901      	ldr	r1, [sp, #4]
 800155e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001562:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001566:	4259      	negs	r1, r3
 8001568:	4159      	adcs	r1, r3
 800156a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156e:	e7eb      	b.n	8001548 <__swhatbuf_r+0x24>

08001570 <__smakebuf_r>:
 8001570:	898b      	ldrh	r3, [r1, #12]
 8001572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001574:	079d      	lsls	r5, r3, #30
 8001576:	4606      	mov	r6, r0
 8001578:	460c      	mov	r4, r1
 800157a:	d507      	bpl.n	800158c <__smakebuf_r+0x1c>
 800157c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001580:	6023      	str	r3, [r4, #0]
 8001582:	6123      	str	r3, [r4, #16]
 8001584:	2301      	movs	r3, #1
 8001586:	6163      	str	r3, [r4, #20]
 8001588:	b003      	add	sp, #12
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158c:	ab01      	add	r3, sp, #4
 800158e:	466a      	mov	r2, sp
 8001590:	f7ff ffc8 	bl	8001524 <__swhatbuf_r>
 8001594:	9f00      	ldr	r7, [sp, #0]
 8001596:	4605      	mov	r5, r0
 8001598:	4639      	mov	r1, r7
 800159a:	4630      	mov	r0, r6
 800159c:	f7ff fbba 	bl	8000d14 <_malloc_r>
 80015a0:	b948      	cbnz	r0, 80015b6 <__smakebuf_r+0x46>
 80015a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015a6:	059a      	lsls	r2, r3, #22
 80015a8:	d4ee      	bmi.n	8001588 <__smakebuf_r+0x18>
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	81a3      	strh	r3, [r4, #12]
 80015b4:	e7e2      	b.n	800157c <__smakebuf_r+0xc>
 80015b6:	89a3      	ldrh	r3, [r4, #12]
 80015b8:	6020      	str	r0, [r4, #0]
 80015ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015be:	81a3      	strh	r3, [r4, #12]
 80015c0:	9b01      	ldr	r3, [sp, #4]
 80015c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80015c6:	b15b      	cbz	r3, 80015e0 <__smakebuf_r+0x70>
 80015c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015cc:	4630      	mov	r0, r6
 80015ce:	f000 f81d 	bl	800160c <_isatty_r>
 80015d2:	b128      	cbz	r0, 80015e0 <__smakebuf_r+0x70>
 80015d4:	89a3      	ldrh	r3, [r4, #12]
 80015d6:	f023 0303 	bic.w	r3, r3, #3
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	81a3      	strh	r3, [r4, #12]
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	431d      	orrs	r5, r3
 80015e4:	81a5      	strh	r5, [r4, #12]
 80015e6:	e7cf      	b.n	8001588 <__smakebuf_r+0x18>

080015e8 <_fstat_r>:
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	4d07      	ldr	r5, [pc, #28]	@ (8001608 <_fstat_r+0x20>)
 80015ec:	2300      	movs	r3, #0
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	602b      	str	r3, [r5, #0]
 80015f6:	f7ff f813 	bl	8000620 <_fstat>
 80015fa:	1c43      	adds	r3, r0, #1
 80015fc:	d102      	bne.n	8001604 <_fstat_r+0x1c>
 80015fe:	682b      	ldr	r3, [r5, #0]
 8001600:	b103      	cbz	r3, 8001604 <_fstat_r+0x1c>
 8001602:	6023      	str	r3, [r4, #0]
 8001604:	bd38      	pop	{r3, r4, r5, pc}
 8001606:	bf00      	nop
 8001608:	200001b8 	.word	0x200001b8

0800160c <_isatty_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4d06      	ldr	r5, [pc, #24]	@ (8001628 <_isatty_r+0x1c>)
 8001610:	2300      	movs	r3, #0
 8001612:	4604      	mov	r4, r0
 8001614:	4608      	mov	r0, r1
 8001616:	602b      	str	r3, [r5, #0]
 8001618:	f7ff f812 	bl	8000640 <_isatty>
 800161c:	1c43      	adds	r3, r0, #1
 800161e:	d102      	bne.n	8001626 <_isatty_r+0x1a>
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	b103      	cbz	r3, 8001626 <_isatty_r+0x1a>
 8001624:	6023      	str	r3, [r4, #0]
 8001626:	bd38      	pop	{r3, r4, r5, pc}
 8001628:	200001b8 	.word	0x200001b8

0800162c <_sbrk_r>:
 800162c:	b538      	push	{r3, r4, r5, lr}
 800162e:	4d06      	ldr	r5, [pc, #24]	@ (8001648 <_sbrk_r+0x1c>)
 8001630:	2300      	movs	r3, #0
 8001632:	4604      	mov	r4, r0
 8001634:	4608      	mov	r0, r1
 8001636:	602b      	str	r3, [r5, #0]
 8001638:	f7ff f81a 	bl	8000670 <_sbrk>
 800163c:	1c43      	adds	r3, r0, #1
 800163e:	d102      	bne.n	8001646 <_sbrk_r+0x1a>
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	b103      	cbz	r3, 8001646 <_sbrk_r+0x1a>
 8001644:	6023      	str	r3, [r4, #0]
 8001646:	bd38      	pop	{r3, r4, r5, pc}
 8001648:	200001b8 	.word	0x200001b8

0800164c <_init>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr

08001658 <_fini>:
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	bf00      	nop
 800165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165e:	bc08      	pop	{r3}
 8001660:	469e      	mov	lr, r3
 8001662:	4770      	bx	lr
