
StackGuard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800156c  0800156c  0000256c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001658  08001658  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001658  08001658  00002658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001660  08001660  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001660  08001660  00002660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001664  08001664  00002664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001668  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080016c4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080016c4  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000125d  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006a2  00000000  00000000  000042e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00004990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000121  00000000  00000000  00004b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa95  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000218c  00000000  00000000  000146ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000554f5  00000000  00000000  0001687a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006bd6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d04  00000000  00000000  0006bdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0006cab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001554 	.word	0x08001554

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001554 	.word	0x08001554

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000284:	f3bf 8f4f 	dsb	sy
}
 8000288:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <__NVIC_SystemReset+0x24>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000292:	4904      	ldr	r1, [pc, #16]	@ (80002a4 <__NVIC_SystemReset+0x24>)
 8000294:	4b04      	ldr	r3, [pc, #16]	@ (80002a8 <__NVIC_SystemReset+0x28>)
 8000296:	4313      	orrs	r3, r2
 8000298:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800029a:	f3bf 8f4f 	dsb	sy
}
 800029e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80002a0:	bf00      	nop
 80002a2:	e7fd      	b.n	80002a0 <__NVIC_SystemReset+0x20>
 80002a4:	e000ed00 	.word	0xe000ed00
 80002a8:	05fa0004 	.word	0x05fa0004

080002ac <ConfigMPU>:
#define MPU_REGION_NO_ACCESS    (0x00)
#define MPU_RASR_ENABLE         (1UL << 0)


static void ConfigMPU(uint32_t base_addr, uint32_t size, uint32_t attributes)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	// Enable the MPU peripheral
    MPU->CTRL = MPU_CTRL_ENABLE_Msk;
 80002b8:	4b19      	ldr	r3, [pc, #100]	@ (8000320 <ConfigMPU+0x74>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	605a      	str	r2, [r3, #4]
    // Use default Memory Map for Privileged Software execution
    MPU->CTRL |= MPU_CTRL_PRIVDEFENA_Msk;
 80002be:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <ConfigMPU+0x74>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a17      	ldr	r2, [pc, #92]	@ (8000320 <ConfigMPU+0x74>)
 80002c4:	f043 0304 	orr.w	r3, r3, #4
 80002c8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80002ca:	f3bf 8f4f 	dsb	sy
}
 80002ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002d0:	f3bf 8f6f 	isb	sy
}
 80002d4:	bf00      	nop
    // Complete all previous memory operations
    __DSB();
    // Flush the Instruction Pipeline
    __ISB();
	// Set Memory Region Number
    MPU->RNR = MPU_REGION_NUMBER;
 80002d6:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <ConfigMPU+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
    // Set Memory Region Base Address
    MPU->RBAR = base_addr & MPU_RBAR_ADDR_Msk;
 80002dc:	4a10      	ldr	r2, [pc, #64]	@ (8000320 <ConfigMPU+0x74>)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	f023 031f 	bic.w	r3, r3, #31
 80002e4:	60d3      	str	r3, [r2, #12]
    // Set Memory Access permissions
    MPU->RASR |= (attributes << MPU_RASR_AP_Pos);
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <ConfigMPU+0x74>)
 80002e8:	691a      	ldr	r2, [r3, #16]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	061b      	lsls	r3, r3, #24
 80002ee:	490c      	ldr	r1, [pc, #48]	@ (8000320 <ConfigMPU+0x74>)
 80002f0:	4313      	orrs	r3, r2
 80002f2:	610b      	str	r3, [r1, #16]
    // Set Memory Region Size
    MPU->RASR |= ((size << MPU_RASR_SIZE_Pos) & MPU_RASR_SIZE_Msk);
 80002f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <ConfigMPU+0x74>)
 80002f6:	691a      	ldr	r2, [r3, #16]
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000300:	4907      	ldr	r1, [pc, #28]	@ (8000320 <ConfigMPU+0x74>)
 8000302:	4313      	orrs	r3, r2
 8000304:	610b      	str	r3, [r1, #16]
    // Enable Memory Region
    MPU->RASR |= MPU_RASR_ENABLE;
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <ConfigMPU+0x74>)
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <ConfigMPU+0x74>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6113      	str	r3, [r2, #16]
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed90 	.word	0xe000ed90

08000324 <StackGuard_Init>:

void StackGuard_Init(uint32_t guard_size) 
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	// Calculate Guard buffer size
    extern uint32_t _estack;
    uint32_t guard_base = (uint32_t)&_estack - guard_size;
 800032c:	4a06      	ldr	r2, [pc, #24]	@ (8000348 <StackGuard_Init+0x24>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	60fb      	str	r3, [r7, #12]
    // Configure Guard Buffer with Attributes
    ConfigMPU(guard_base, guard_size, MPU_REGION_NO_ACCESS);
 8000334:	2200      	movs	r2, #0
 8000336:	6879      	ldr	r1, [r7, #4]
 8000338:	68f8      	ldr	r0, [r7, #12]
 800033a:	f7ff ffb7 	bl	80002ac <ConfigMPU>
}
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20018000 	.word	0x20018000

0800034c <MemManage_Handler>:

void MemManage_Handler(void) 
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
    uint32_t original_msp, msp, pc;
    // Save the current MSP
    __asm__("MRS %0, MSP" : "=r" (original_msp));
 8000352:	f3ef 8308 	mrs	r3, MSP
 8000356:	60fb      	str	r3, [r7, #12]
    // Switch to the fault stack
    __asm__("LDR R0, =_estack");
 8000358:	481f      	ldr	r0, [pc, #124]	@ (80003d8 <MemManage_Handler+0x8c>)
    __asm__("MSR MSP, R0");
 800035a:	f380 8808 	msr	MSP, r0
    // Capture MSP and PC from fault context
    __asm__("MRS %0, MSP" : "=r" (msp));
 800035e:	f3ef 8308 	mrs	r3, MSP
 8000362:	60bb      	str	r3, [r7, #8]
    __asm__("LDR %0, [SP, #24]" : "=r" (pc));
 8000364:	9b06      	ldr	r3, [sp, #24]
 8000366:	607b      	str	r3, [r7, #4]
    // Validate and fetch the faulting address
    uint32_t faulting_address = (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) ? SCB->MMFAR : 0xFFFFFFFF;
 8000368:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <MemManage_Handler+0x70>)
 800036a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800036c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000370:	2b00      	cmp	r3, #0
 8000372:	d002      	beq.n	800037a <MemManage_Handler+0x2e>
 8000374:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <MemManage_Handler+0x70>)
 8000376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000378:	e001      	b.n	800037e <MemManage_Handler+0x32>
 800037a:	f04f 33ff 	mov.w	r3, #4294967295
 800037e:	603b      	str	r3, [r7, #0]
    // Print crash details
    printf("========== Crash Report ==========\n");
 8000380:	480f      	ldr	r0, [pc, #60]	@ (80003c0 <MemManage_Handler+0x74>)
 8000382:	f000 fa83 	bl	800088c <puts>
    printf("Fault Address  : 0x%08X\n", (unsigned int)faulting_address);
 8000386:	6839      	ldr	r1, [r7, #0]
 8000388:	480e      	ldr	r0, [pc, #56]	@ (80003c4 <MemManage_Handler+0x78>)
 800038a:	f000 fa17 	bl	80007bc <iprintf>
    printf("Fault Status   : 0x%08X\n", (unsigned int)SCB->CFSR);
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <MemManage_Handler+0x70>)
 8000390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000392:	4619      	mov	r1, r3
 8000394:	480c      	ldr	r0, [pc, #48]	@ (80003c8 <MemManage_Handler+0x7c>)
 8000396:	f000 fa11 	bl	80007bc <iprintf>
    printf("Stack Pointer  : 0x%08X\n", (unsigned int)msp);
 800039a:	68b9      	ldr	r1, [r7, #8]
 800039c:	480b      	ldr	r0, [pc, #44]	@ (80003cc <MemManage_Handler+0x80>)
 800039e:	f000 fa0d 	bl	80007bc <iprintf>
    printf("Program Counter: 0x%08X\n", (unsigned int)pc);
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	480a      	ldr	r0, [pc, #40]	@ (80003d0 <MemManage_Handler+0x84>)
 80003a6:	f000 fa09 	bl	80007bc <iprintf>
    printf("==================================\n");
 80003aa:	480a      	ldr	r0, [pc, #40]	@ (80003d4 <MemManage_Handler+0x88>)
 80003ac:	f000 fa6e 	bl	800088c <puts>
    // Restore the original MSP
    __asm__("MSR MSP, %0" :: "r" (original_msp));
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f383 8808 	msr	MSP, r3
    // Perform a system reset
    NVIC_SystemReset();
 80003b6:	f7ff ff63 	bl	8000280 <__NVIC_SystemReset>
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	0800156c 	.word	0x0800156c
 80003c4:	08001590 	.word	0x08001590
 80003c8:	080015ac 	.word	0x080015ac
 80003cc:	080015c8 	.word	0x080015c8
 80003d0:	080015e4 	.word	0x080015e4
 80003d4:	08001600 	.word	0x08001600
 80003d8:	20018000 	.word	0x20018000

080003dc <UART2_TxChar>:
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
}

void UART2_TxChar(char ch)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART2->SR & USART_SR_TXE));
 80003e6:	bf00      	nop
 80003e8:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <UART2_TxChar+0x2c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0f9      	beq.n	80003e8 <UART2_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART2->DR = (ch &0xFF);
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <UART2_TxChar+0x2c>)
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	6053      	str	r3, [r2, #4]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40004400 	.word	0x40004400

0800040c <UART2_RxChar>:
		UART2_TxChar(*str++);
	}
}

uint8_t UART2_RxChar(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	while(!(USART2->SR & (1<<5)));
 8000410:	bf00      	nop
 8000412:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <UART2_RxChar+0x24>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f003 0320 	and.w	r3, r3, #32
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f9      	beq.n	8000412 <UART2_RxChar+0x6>
	return USART2->DR;
 800041e:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <UART2_RxChar+0x24>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	b2db      	uxtb	r3, r3
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40004400 	.word	0x40004400

08000434 <_write>:

int _write(int file, char *ptr, int len)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	e009      	b.n	800045a <_write+0x26>
    {
        UART2_TxChar(ptr[i]);
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	68ba      	ldr	r2, [r7, #8]
 800044a:	4413      	add	r3, r2
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ffc4 	bl	80003dc <UART2_TxChar>
    for (int i = 0; i < len; i++)
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	3301      	adds	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	697a      	ldr	r2, [r7, #20]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	429a      	cmp	r2, r3
 8000460:	dbf1      	blt.n	8000446 <_write+0x12>
    }
    return len;
 8000462:	687b      	ldr	r3, [r7, #4]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <_read>:

int _read(int file, char *ptr, int len)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b087      	sub	sp, #28
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
    (void)file;
    for (int i = 0; i < len; i++)
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	e015      	b.n	80004aa <_read+0x3e>
    {
        ptr[i] = UART2_RxChar();
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	68ba      	ldr	r2, [r7, #8]
 8000482:	18d4      	adds	r4, r2, r3
 8000484:	f7ff ffc2 	bl	800040c <UART2_RxChar>
 8000488:	4603      	mov	r3, r0
 800048a:	7023      	strb	r3, [r4, #0]
        if (ptr[i] == '\r')
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	4413      	add	r3, r2
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b0d      	cmp	r3, #13
 8000496:	d105      	bne.n	80004a4 <_read+0x38>
        {
            ptr[i] = '\n';
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	68ba      	ldr	r2, [r7, #8]
 800049c:	4413      	add	r3, r2
 800049e:	220a      	movs	r2, #10
 80004a0:	701a      	strb	r2, [r3, #0]
            break;
 80004a2:	e006      	b.n	80004b2 <_read+0x46>
    for (int i = 0; i < len; i++)
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	3301      	adds	r3, #1
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	697a      	ldr	r2, [r7, #20]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	dbe5      	blt.n	800047e <_read+0x12>
        }
    }
    return len;
 80004b2:	687b      	ldr	r3, [r7, #4]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	371c      	adds	r7, #28
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd90      	pop	{r4, r7, pc}

080004bc <RecursiveFunction>:
#include <stdint.h>
#include "GUARD.h"

void RecursiveFunction(int depth)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b0e6      	sub	sp, #408	@ 0x198
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80004c6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80004ca:	6018      	str	r0, [r3, #0]
    volatile int dummy[100];
    dummy[0] = depth;
 80004cc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80004d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80004d4:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80004d8:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80004dc:	6812      	ldr	r2, [r2, #0]
 80004de:	601a      	str	r2, [r3, #0]
    RecursiveFunction(depth + 1);
 80004e0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80004e4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ffe5 	bl	80004bc <RecursiveFunction>
}
 80004f2:	bf00      	nop
 80004f4:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <main>:

int main()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	StackGuard_Init(32);
 8000500:	2020      	movs	r0, #32
 8000502:	f7ff ff0f 	bl	8000324 <StackGuard_Init>

	RecursiveFunction(0);
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ffd8 	bl	80004bc <RecursiveFunction>

	while(1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <main+0x10>

08000510 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000538:	605a      	str	r2, [r3, #4]
  return 0;
 800053a:	2300      	movs	r3, #0
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <_isatty>:

int _isatty(int file)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000550:	2301      	movs	r3, #1
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000580:	4a14      	ldr	r2, [pc, #80]	@ (80005d4 <_sbrk+0x5c>)
 8000582:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <_sbrk+0x60>)
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <_sbrk+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000594:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <_sbrk+0x64>)
 8000596:	4a12      	ldr	r2, [pc, #72]	@ (80005e0 <_sbrk+0x68>)
 8000598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d207      	bcs.n	80005b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a8:	f000 fa9e 	bl	8000ae8 <__errno>
 80005ac:	4603      	mov	r3, r0
 80005ae:	220c      	movs	r2, #12
 80005b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	e009      	b.n	80005cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005be:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <_sbrk+0x64>)
 80005c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ca:	68fb      	ldr	r3, [r7, #12]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20018000 	.word	0x20018000
 80005d8:	00000400 	.word	0x00000400
 80005dc:	20000078 	.word	0x20000078
 80005e0:	200001c8 	.word	0x200001c8

080005e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	@ (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	@ (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000612:	f000 fa6f 	bl	8000af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff ff71 	bl	80004fc <main>

0800061a <LoopForever>:

LoopForever:
  b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   r0, =_estack
 800061c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000628:	08001668 	.word	0x08001668
  ldr r2, =_sbss
 800062c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000630:	200001c8 	.word	0x200001c8

08000634 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <std>:
 8000638:	2300      	movs	r3, #0
 800063a:	b510      	push	{r4, lr}
 800063c:	4604      	mov	r4, r0
 800063e:	e9c0 3300 	strd	r3, r3, [r0]
 8000642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000646:	6083      	str	r3, [r0, #8]
 8000648:	8181      	strh	r1, [r0, #12]
 800064a:	6643      	str	r3, [r0, #100]	@ 0x64
 800064c:	81c2      	strh	r2, [r0, #14]
 800064e:	6183      	str	r3, [r0, #24]
 8000650:	4619      	mov	r1, r3
 8000652:	2208      	movs	r2, #8
 8000654:	305c      	adds	r0, #92	@ 0x5c
 8000656:	f000 f9f9 	bl	8000a4c <memset>
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <std+0x58>)
 800065c:	6263      	str	r3, [r4, #36]	@ 0x24
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <std+0x5c>)
 8000660:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <std+0x60>)
 8000664:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <std+0x64>)
 8000668:	6323      	str	r3, [r4, #48]	@ 0x30
 800066a:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <std+0x68>)
 800066c:	6224      	str	r4, [r4, #32]
 800066e:	429c      	cmp	r4, r3
 8000670:	d006      	beq.n	8000680 <std+0x48>
 8000672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000676:	4294      	cmp	r4, r2
 8000678:	d002      	beq.n	8000680 <std+0x48>
 800067a:	33d0      	adds	r3, #208	@ 0xd0
 800067c:	429c      	cmp	r4, r3
 800067e:	d105      	bne.n	800068c <std+0x54>
 8000680:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000688:	f000 ba58 	b.w	8000b3c <__retarget_lock_init_recursive>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	bf00      	nop
 8000690:	0800089d 	.word	0x0800089d
 8000694:	080008bf 	.word	0x080008bf
 8000698:	080008f7 	.word	0x080008f7
 800069c:	0800091b 	.word	0x0800091b
 80006a0:	2000007c 	.word	0x2000007c

080006a4 <stdio_exit_handler>:
 80006a4:	4a02      	ldr	r2, [pc, #8]	@ (80006b0 <stdio_exit_handler+0xc>)
 80006a6:	4903      	ldr	r1, [pc, #12]	@ (80006b4 <stdio_exit_handler+0x10>)
 80006a8:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <stdio_exit_handler+0x14>)
 80006aa:	f000 b869 	b.w	8000780 <_fwalk_sglue>
 80006ae:	bf00      	nop
 80006b0:	20000000 	.word	0x20000000
 80006b4:	080013dd 	.word	0x080013dd
 80006b8:	20000010 	.word	0x20000010

080006bc <cleanup_stdio>:
 80006bc:	6841      	ldr	r1, [r0, #4]
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <cleanup_stdio+0x34>)
 80006c0:	4299      	cmp	r1, r3
 80006c2:	b510      	push	{r4, lr}
 80006c4:	4604      	mov	r4, r0
 80006c6:	d001      	beq.n	80006cc <cleanup_stdio+0x10>
 80006c8:	f000 fe88 	bl	80013dc <_fflush_r>
 80006cc:	68a1      	ldr	r1, [r4, #8]
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <cleanup_stdio+0x38>)
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d002      	beq.n	80006da <cleanup_stdio+0x1e>
 80006d4:	4620      	mov	r0, r4
 80006d6:	f000 fe81 	bl	80013dc <_fflush_r>
 80006da:	68e1      	ldr	r1, [r4, #12]
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <cleanup_stdio+0x3c>)
 80006de:	4299      	cmp	r1, r3
 80006e0:	d004      	beq.n	80006ec <cleanup_stdio+0x30>
 80006e2:	4620      	mov	r0, r4
 80006e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e8:	f000 be78 	b.w	80013dc <_fflush_r>
 80006ec:	bd10      	pop	{r4, pc}
 80006ee:	bf00      	nop
 80006f0:	2000007c 	.word	0x2000007c
 80006f4:	200000e4 	.word	0x200000e4
 80006f8:	2000014c 	.word	0x2000014c

080006fc <global_stdio_init.part.0>:
 80006fc:	b510      	push	{r4, lr}
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <global_stdio_init.part.0+0x30>)
 8000700:	4c0b      	ldr	r4, [pc, #44]	@ (8000730 <global_stdio_init.part.0+0x34>)
 8000702:	4a0c      	ldr	r2, [pc, #48]	@ (8000734 <global_stdio_init.part.0+0x38>)
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	4620      	mov	r0, r4
 8000708:	2200      	movs	r2, #0
 800070a:	2104      	movs	r1, #4
 800070c:	f7ff ff94 	bl	8000638 <std>
 8000710:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000714:	2201      	movs	r2, #1
 8000716:	2109      	movs	r1, #9
 8000718:	f7ff ff8e 	bl	8000638 <std>
 800071c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000720:	2202      	movs	r2, #2
 8000722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000726:	2112      	movs	r1, #18
 8000728:	f7ff bf86 	b.w	8000638 <std>
 800072c:	200001b4 	.word	0x200001b4
 8000730:	2000007c 	.word	0x2000007c
 8000734:	080006a5 	.word	0x080006a5

08000738 <__sfp_lock_acquire>:
 8000738:	4801      	ldr	r0, [pc, #4]	@ (8000740 <__sfp_lock_acquire+0x8>)
 800073a:	f000 ba00 	b.w	8000b3e <__retarget_lock_acquire_recursive>
 800073e:	bf00      	nop
 8000740:	200001bd 	.word	0x200001bd

08000744 <__sfp_lock_release>:
 8000744:	4801      	ldr	r0, [pc, #4]	@ (800074c <__sfp_lock_release+0x8>)
 8000746:	f000 b9fb 	b.w	8000b40 <__retarget_lock_release_recursive>
 800074a:	bf00      	nop
 800074c:	200001bd 	.word	0x200001bd

08000750 <__sinit>:
 8000750:	b510      	push	{r4, lr}
 8000752:	4604      	mov	r4, r0
 8000754:	f7ff fff0 	bl	8000738 <__sfp_lock_acquire>
 8000758:	6a23      	ldr	r3, [r4, #32]
 800075a:	b11b      	cbz	r3, 8000764 <__sinit+0x14>
 800075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000760:	f7ff bff0 	b.w	8000744 <__sfp_lock_release>
 8000764:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <__sinit+0x28>)
 8000766:	6223      	str	r3, [r4, #32]
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <__sinit+0x2c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1f5      	bne.n	800075c <__sinit+0xc>
 8000770:	f7ff ffc4 	bl	80006fc <global_stdio_init.part.0>
 8000774:	e7f2      	b.n	800075c <__sinit+0xc>
 8000776:	bf00      	nop
 8000778:	080006bd 	.word	0x080006bd
 800077c:	200001b4 	.word	0x200001b4

08000780 <_fwalk_sglue>:
 8000780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000784:	4607      	mov	r7, r0
 8000786:	4688      	mov	r8, r1
 8000788:	4614      	mov	r4, r2
 800078a:	2600      	movs	r6, #0
 800078c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000790:	f1b9 0901 	subs.w	r9, r9, #1
 8000794:	d505      	bpl.n	80007a2 <_fwalk_sglue+0x22>
 8000796:	6824      	ldr	r4, [r4, #0]
 8000798:	2c00      	cmp	r4, #0
 800079a:	d1f7      	bne.n	800078c <_fwalk_sglue+0xc>
 800079c:	4630      	mov	r0, r6
 800079e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007a2:	89ab      	ldrh	r3, [r5, #12]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d907      	bls.n	80007b8 <_fwalk_sglue+0x38>
 80007a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007ac:	3301      	adds	r3, #1
 80007ae:	d003      	beq.n	80007b8 <_fwalk_sglue+0x38>
 80007b0:	4629      	mov	r1, r5
 80007b2:	4638      	mov	r0, r7
 80007b4:	47c0      	blx	r8
 80007b6:	4306      	orrs	r6, r0
 80007b8:	3568      	adds	r5, #104	@ 0x68
 80007ba:	e7e9      	b.n	8000790 <_fwalk_sglue+0x10>

080007bc <iprintf>:
 80007bc:	b40f      	push	{r0, r1, r2, r3}
 80007be:	b507      	push	{r0, r1, r2, lr}
 80007c0:	4906      	ldr	r1, [pc, #24]	@ (80007dc <iprintf+0x20>)
 80007c2:	ab04      	add	r3, sp, #16
 80007c4:	6808      	ldr	r0, [r1, #0]
 80007c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80007ca:	6881      	ldr	r1, [r0, #8]
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	f000 fadb 	bl	8000d88 <_vfiprintf_r>
 80007d2:	b003      	add	sp, #12
 80007d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80007d8:	b004      	add	sp, #16
 80007da:	4770      	bx	lr
 80007dc:	2000000c 	.word	0x2000000c

080007e0 <_puts_r>:
 80007e0:	6a03      	ldr	r3, [r0, #32]
 80007e2:	b570      	push	{r4, r5, r6, lr}
 80007e4:	6884      	ldr	r4, [r0, #8]
 80007e6:	4605      	mov	r5, r0
 80007e8:	460e      	mov	r6, r1
 80007ea:	b90b      	cbnz	r3, 80007f0 <_puts_r+0x10>
 80007ec:	f7ff ffb0 	bl	8000750 <__sinit>
 80007f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007f2:	07db      	lsls	r3, r3, #31
 80007f4:	d405      	bmi.n	8000802 <_puts_r+0x22>
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	0598      	lsls	r0, r3, #22
 80007fa:	d402      	bmi.n	8000802 <_puts_r+0x22>
 80007fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007fe:	f000 f99e 	bl	8000b3e <__retarget_lock_acquire_recursive>
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	0719      	lsls	r1, r3, #28
 8000806:	d502      	bpl.n	800080e <_puts_r+0x2e>
 8000808:	6923      	ldr	r3, [r4, #16]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d135      	bne.n	800087a <_puts_r+0x9a>
 800080e:	4621      	mov	r1, r4
 8000810:	4628      	mov	r0, r5
 8000812:	f000 f8c5 	bl	80009a0 <__swsetup_r>
 8000816:	b380      	cbz	r0, 800087a <_puts_r+0x9a>
 8000818:	f04f 35ff 	mov.w	r5, #4294967295
 800081c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800081e:	07da      	lsls	r2, r3, #31
 8000820:	d405      	bmi.n	800082e <_puts_r+0x4e>
 8000822:	89a3      	ldrh	r3, [r4, #12]
 8000824:	059b      	lsls	r3, r3, #22
 8000826:	d402      	bmi.n	800082e <_puts_r+0x4e>
 8000828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800082a:	f000 f989 	bl	8000b40 <__retarget_lock_release_recursive>
 800082e:	4628      	mov	r0, r5
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	2b00      	cmp	r3, #0
 8000834:	da04      	bge.n	8000840 <_puts_r+0x60>
 8000836:	69a2      	ldr	r2, [r4, #24]
 8000838:	429a      	cmp	r2, r3
 800083a:	dc17      	bgt.n	800086c <_puts_r+0x8c>
 800083c:	290a      	cmp	r1, #10
 800083e:	d015      	beq.n	800086c <_puts_r+0x8c>
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	6022      	str	r2, [r4, #0]
 8000846:	7019      	strb	r1, [r3, #0]
 8000848:	68a3      	ldr	r3, [r4, #8]
 800084a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800084e:	3b01      	subs	r3, #1
 8000850:	60a3      	str	r3, [r4, #8]
 8000852:	2900      	cmp	r1, #0
 8000854:	d1ed      	bne.n	8000832 <_puts_r+0x52>
 8000856:	2b00      	cmp	r3, #0
 8000858:	da11      	bge.n	800087e <_puts_r+0x9e>
 800085a:	4622      	mov	r2, r4
 800085c:	210a      	movs	r1, #10
 800085e:	4628      	mov	r0, r5
 8000860:	f000 f85f 	bl	8000922 <__swbuf_r>
 8000864:	3001      	adds	r0, #1
 8000866:	d0d7      	beq.n	8000818 <_puts_r+0x38>
 8000868:	250a      	movs	r5, #10
 800086a:	e7d7      	b.n	800081c <_puts_r+0x3c>
 800086c:	4622      	mov	r2, r4
 800086e:	4628      	mov	r0, r5
 8000870:	f000 f857 	bl	8000922 <__swbuf_r>
 8000874:	3001      	adds	r0, #1
 8000876:	d1e7      	bne.n	8000848 <_puts_r+0x68>
 8000878:	e7ce      	b.n	8000818 <_puts_r+0x38>
 800087a:	3e01      	subs	r6, #1
 800087c:	e7e4      	b.n	8000848 <_puts_r+0x68>
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	6022      	str	r2, [r4, #0]
 8000884:	220a      	movs	r2, #10
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e7ee      	b.n	8000868 <_puts_r+0x88>
	...

0800088c <puts>:
 800088c:	4b02      	ldr	r3, [pc, #8]	@ (8000898 <puts+0xc>)
 800088e:	4601      	mov	r1, r0
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	f7ff bfa5 	b.w	80007e0 <_puts_r>
 8000896:	bf00      	nop
 8000898:	2000000c 	.word	0x2000000c

0800089c <__sread>:
 800089c:	b510      	push	{r4, lr}
 800089e:	460c      	mov	r4, r1
 80008a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a4:	f000 f8fc 	bl	8000aa0 <_read_r>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	bfab      	itete	ge
 80008ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008ae:	89a3      	ldrhlt	r3, [r4, #12]
 80008b0:	181b      	addge	r3, r3, r0
 80008b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008b6:	bfac      	ite	ge
 80008b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008ba:	81a3      	strhlt	r3, [r4, #12]
 80008bc:	bd10      	pop	{r4, pc}

080008be <__swrite>:
 80008be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008c2:	461f      	mov	r7, r3
 80008c4:	898b      	ldrh	r3, [r1, #12]
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	4605      	mov	r5, r0
 80008ca:	460c      	mov	r4, r1
 80008cc:	4616      	mov	r6, r2
 80008ce:	d505      	bpl.n	80008dc <__swrite+0x1e>
 80008d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d4:	2302      	movs	r3, #2
 80008d6:	2200      	movs	r2, #0
 80008d8:	f000 f8d0 	bl	8000a7c <_lseek_r>
 80008dc:	89a3      	ldrh	r3, [r4, #12]
 80008de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008e6:	81a3      	strh	r3, [r4, #12]
 80008e8:	4632      	mov	r2, r6
 80008ea:	463b      	mov	r3, r7
 80008ec:	4628      	mov	r0, r5
 80008ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008f2:	f000 b8e7 	b.w	8000ac4 <_write_r>

080008f6 <__sseek>:
 80008f6:	b510      	push	{r4, lr}
 80008f8:	460c      	mov	r4, r1
 80008fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008fe:	f000 f8bd 	bl	8000a7c <_lseek_r>
 8000902:	1c43      	adds	r3, r0, #1
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	bf15      	itete	ne
 8000908:	6560      	strne	r0, [r4, #84]	@ 0x54
 800090a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800090e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000912:	81a3      	strheq	r3, [r4, #12]
 8000914:	bf18      	it	ne
 8000916:	81a3      	strhne	r3, [r4, #12]
 8000918:	bd10      	pop	{r4, pc}

0800091a <__sclose>:
 800091a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800091e:	f000 b89d 	b.w	8000a5c <_close_r>

08000922 <__swbuf_r>:
 8000922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000924:	460e      	mov	r6, r1
 8000926:	4614      	mov	r4, r2
 8000928:	4605      	mov	r5, r0
 800092a:	b118      	cbz	r0, 8000934 <__swbuf_r+0x12>
 800092c:	6a03      	ldr	r3, [r0, #32]
 800092e:	b90b      	cbnz	r3, 8000934 <__swbuf_r+0x12>
 8000930:	f7ff ff0e 	bl	8000750 <__sinit>
 8000934:	69a3      	ldr	r3, [r4, #24]
 8000936:	60a3      	str	r3, [r4, #8]
 8000938:	89a3      	ldrh	r3, [r4, #12]
 800093a:	071a      	lsls	r2, r3, #28
 800093c:	d501      	bpl.n	8000942 <__swbuf_r+0x20>
 800093e:	6923      	ldr	r3, [r4, #16]
 8000940:	b943      	cbnz	r3, 8000954 <__swbuf_r+0x32>
 8000942:	4621      	mov	r1, r4
 8000944:	4628      	mov	r0, r5
 8000946:	f000 f82b 	bl	80009a0 <__swsetup_r>
 800094a:	b118      	cbz	r0, 8000954 <__swbuf_r+0x32>
 800094c:	f04f 37ff 	mov.w	r7, #4294967295
 8000950:	4638      	mov	r0, r7
 8000952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	6922      	ldr	r2, [r4, #16]
 8000958:	1a98      	subs	r0, r3, r2
 800095a:	6963      	ldr	r3, [r4, #20]
 800095c:	b2f6      	uxtb	r6, r6
 800095e:	4283      	cmp	r3, r0
 8000960:	4637      	mov	r7, r6
 8000962:	dc05      	bgt.n	8000970 <__swbuf_r+0x4e>
 8000964:	4621      	mov	r1, r4
 8000966:	4628      	mov	r0, r5
 8000968:	f000 fd38 	bl	80013dc <_fflush_r>
 800096c:	2800      	cmp	r0, #0
 800096e:	d1ed      	bne.n	800094c <__swbuf_r+0x2a>
 8000970:	68a3      	ldr	r3, [r4, #8]
 8000972:	3b01      	subs	r3, #1
 8000974:	60a3      	str	r3, [r4, #8]
 8000976:	6823      	ldr	r3, [r4, #0]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	6022      	str	r2, [r4, #0]
 800097c:	701e      	strb	r6, [r3, #0]
 800097e:	6962      	ldr	r2, [r4, #20]
 8000980:	1c43      	adds	r3, r0, #1
 8000982:	429a      	cmp	r2, r3
 8000984:	d004      	beq.n	8000990 <__swbuf_r+0x6e>
 8000986:	89a3      	ldrh	r3, [r4, #12]
 8000988:	07db      	lsls	r3, r3, #31
 800098a:	d5e1      	bpl.n	8000950 <__swbuf_r+0x2e>
 800098c:	2e0a      	cmp	r6, #10
 800098e:	d1df      	bne.n	8000950 <__swbuf_r+0x2e>
 8000990:	4621      	mov	r1, r4
 8000992:	4628      	mov	r0, r5
 8000994:	f000 fd22 	bl	80013dc <_fflush_r>
 8000998:	2800      	cmp	r0, #0
 800099a:	d0d9      	beq.n	8000950 <__swbuf_r+0x2e>
 800099c:	e7d6      	b.n	800094c <__swbuf_r+0x2a>
	...

080009a0 <__swsetup_r>:
 80009a0:	b538      	push	{r3, r4, r5, lr}
 80009a2:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <__swsetup_r+0xa8>)
 80009a4:	4605      	mov	r5, r0
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	460c      	mov	r4, r1
 80009aa:	b118      	cbz	r0, 80009b4 <__swsetup_r+0x14>
 80009ac:	6a03      	ldr	r3, [r0, #32]
 80009ae:	b90b      	cbnz	r3, 80009b4 <__swsetup_r+0x14>
 80009b0:	f7ff fece 	bl	8000750 <__sinit>
 80009b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009b8:	0719      	lsls	r1, r3, #28
 80009ba:	d422      	bmi.n	8000a02 <__swsetup_r+0x62>
 80009bc:	06da      	lsls	r2, r3, #27
 80009be:	d407      	bmi.n	80009d0 <__swsetup_r+0x30>
 80009c0:	2209      	movs	r2, #9
 80009c2:	602a      	str	r2, [r5, #0]
 80009c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c8:	81a3      	strh	r3, [r4, #12]
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295
 80009ce:	e033      	b.n	8000a38 <__swsetup_r+0x98>
 80009d0:	0758      	lsls	r0, r3, #29
 80009d2:	d512      	bpl.n	80009fa <__swsetup_r+0x5a>
 80009d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009d6:	b141      	cbz	r1, 80009ea <__swsetup_r+0x4a>
 80009d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009dc:	4299      	cmp	r1, r3
 80009de:	d002      	beq.n	80009e6 <__swsetup_r+0x46>
 80009e0:	4628      	mov	r0, r5
 80009e2:	f000 f8af 	bl	8000b44 <_free_r>
 80009e6:	2300      	movs	r3, #0
 80009e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80009f0:	81a3      	strh	r3, [r4, #12]
 80009f2:	2300      	movs	r3, #0
 80009f4:	6063      	str	r3, [r4, #4]
 80009f6:	6923      	ldr	r3, [r4, #16]
 80009f8:	6023      	str	r3, [r4, #0]
 80009fa:	89a3      	ldrh	r3, [r4, #12]
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	81a3      	strh	r3, [r4, #12]
 8000a02:	6923      	ldr	r3, [r4, #16]
 8000a04:	b94b      	cbnz	r3, 8000a1a <__swsetup_r+0x7a>
 8000a06:	89a3      	ldrh	r3, [r4, #12]
 8000a08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a10:	d003      	beq.n	8000a1a <__swsetup_r+0x7a>
 8000a12:	4621      	mov	r1, r4
 8000a14:	4628      	mov	r0, r5
 8000a16:	f000 fd2f 	bl	8001478 <__smakebuf_r>
 8000a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a1e:	f013 0201 	ands.w	r2, r3, #1
 8000a22:	d00a      	beq.n	8000a3a <__swsetup_r+0x9a>
 8000a24:	2200      	movs	r2, #0
 8000a26:	60a2      	str	r2, [r4, #8]
 8000a28:	6962      	ldr	r2, [r4, #20]
 8000a2a:	4252      	negs	r2, r2
 8000a2c:	61a2      	str	r2, [r4, #24]
 8000a2e:	6922      	ldr	r2, [r4, #16]
 8000a30:	b942      	cbnz	r2, 8000a44 <__swsetup_r+0xa4>
 8000a32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a36:	d1c5      	bne.n	80009c4 <__swsetup_r+0x24>
 8000a38:	bd38      	pop	{r3, r4, r5, pc}
 8000a3a:	0799      	lsls	r1, r3, #30
 8000a3c:	bf58      	it	pl
 8000a3e:	6962      	ldrpl	r2, [r4, #20]
 8000a40:	60a2      	str	r2, [r4, #8]
 8000a42:	e7f4      	b.n	8000a2e <__swsetup_r+0x8e>
 8000a44:	2000      	movs	r0, #0
 8000a46:	e7f7      	b.n	8000a38 <__swsetup_r+0x98>
 8000a48:	2000000c 	.word	0x2000000c

08000a4c <memset>:
 8000a4c:	4402      	add	r2, r0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d100      	bne.n	8000a56 <memset+0xa>
 8000a54:	4770      	bx	lr
 8000a56:	f803 1b01 	strb.w	r1, [r3], #1
 8000a5a:	e7f9      	b.n	8000a50 <memset+0x4>

08000a5c <_close_r>:
 8000a5c:	b538      	push	{r3, r4, r5, lr}
 8000a5e:	4d06      	ldr	r5, [pc, #24]	@ (8000a78 <_close_r+0x1c>)
 8000a60:	2300      	movs	r3, #0
 8000a62:	4604      	mov	r4, r0
 8000a64:	4608      	mov	r0, r1
 8000a66:	602b      	str	r3, [r5, #0]
 8000a68:	f7ff fd52 	bl	8000510 <_close>
 8000a6c:	1c43      	adds	r3, r0, #1
 8000a6e:	d102      	bne.n	8000a76 <_close_r+0x1a>
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	b103      	cbz	r3, 8000a76 <_close_r+0x1a>
 8000a74:	6023      	str	r3, [r4, #0]
 8000a76:	bd38      	pop	{r3, r4, r5, pc}
 8000a78:	200001b8 	.word	0x200001b8

08000a7c <_lseek_r>:
 8000a7c:	b538      	push	{r3, r4, r5, lr}
 8000a7e:	4d07      	ldr	r5, [pc, #28]	@ (8000a9c <_lseek_r+0x20>)
 8000a80:	4604      	mov	r4, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4611      	mov	r1, r2
 8000a86:	2200      	movs	r2, #0
 8000a88:	602a      	str	r2, [r5, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	f7ff fd67 	bl	800055e <_lseek>
 8000a90:	1c43      	adds	r3, r0, #1
 8000a92:	d102      	bne.n	8000a9a <_lseek_r+0x1e>
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	b103      	cbz	r3, 8000a9a <_lseek_r+0x1e>
 8000a98:	6023      	str	r3, [r4, #0]
 8000a9a:	bd38      	pop	{r3, r4, r5, pc}
 8000a9c:	200001b8 	.word	0x200001b8

08000aa0 <_read_r>:
 8000aa0:	b538      	push	{r3, r4, r5, lr}
 8000aa2:	4d07      	ldr	r5, [pc, #28]	@ (8000ac0 <_read_r+0x20>)
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	602a      	str	r2, [r5, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	f7ff fcdc 	bl	800046c <_read>
 8000ab4:	1c43      	adds	r3, r0, #1
 8000ab6:	d102      	bne.n	8000abe <_read_r+0x1e>
 8000ab8:	682b      	ldr	r3, [r5, #0]
 8000aba:	b103      	cbz	r3, 8000abe <_read_r+0x1e>
 8000abc:	6023      	str	r3, [r4, #0]
 8000abe:	bd38      	pop	{r3, r4, r5, pc}
 8000ac0:	200001b8 	.word	0x200001b8

08000ac4 <_write_r>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	4d07      	ldr	r5, [pc, #28]	@ (8000ae4 <_write_r+0x20>)
 8000ac8:	4604      	mov	r4, r0
 8000aca:	4608      	mov	r0, r1
 8000acc:	4611      	mov	r1, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	602a      	str	r2, [r5, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f7ff fcae 	bl	8000434 <_write>
 8000ad8:	1c43      	adds	r3, r0, #1
 8000ada:	d102      	bne.n	8000ae2 <_write_r+0x1e>
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	b103      	cbz	r3, 8000ae2 <_write_r+0x1e>
 8000ae0:	6023      	str	r3, [r4, #0]
 8000ae2:	bd38      	pop	{r3, r4, r5, pc}
 8000ae4:	200001b8 	.word	0x200001b8

08000ae8 <__errno>:
 8000ae8:	4b01      	ldr	r3, [pc, #4]	@ (8000af0 <__errno+0x8>)
 8000aea:	6818      	ldr	r0, [r3, #0]
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2000000c 	.word	0x2000000c

08000af4 <__libc_init_array>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4d0d      	ldr	r5, [pc, #52]	@ (8000b2c <__libc_init_array+0x38>)
 8000af8:	4c0d      	ldr	r4, [pc, #52]	@ (8000b30 <__libc_init_array+0x3c>)
 8000afa:	1b64      	subs	r4, r4, r5
 8000afc:	10a4      	asrs	r4, r4, #2
 8000afe:	2600      	movs	r6, #0
 8000b00:	42a6      	cmp	r6, r4
 8000b02:	d109      	bne.n	8000b18 <__libc_init_array+0x24>
 8000b04:	4d0b      	ldr	r5, [pc, #44]	@ (8000b34 <__libc_init_array+0x40>)
 8000b06:	4c0c      	ldr	r4, [pc, #48]	@ (8000b38 <__libc_init_array+0x44>)
 8000b08:	f000 fd24 	bl	8001554 <_init>
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	10a4      	asrs	r4, r4, #2
 8000b10:	2600      	movs	r6, #0
 8000b12:	42a6      	cmp	r6, r4
 8000b14:	d105      	bne.n	8000b22 <__libc_init_array+0x2e>
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1c:	4798      	blx	r3
 8000b1e:	3601      	adds	r6, #1
 8000b20:	e7ee      	b.n	8000b00 <__libc_init_array+0xc>
 8000b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b26:	4798      	blx	r3
 8000b28:	3601      	adds	r6, #1
 8000b2a:	e7f2      	b.n	8000b12 <__libc_init_array+0x1e>
 8000b2c:	08001660 	.word	0x08001660
 8000b30:	08001660 	.word	0x08001660
 8000b34:	08001660 	.word	0x08001660
 8000b38:	08001664 	.word	0x08001664

08000b3c <__retarget_lock_init_recursive>:
 8000b3c:	4770      	bx	lr

08000b3e <__retarget_lock_acquire_recursive>:
 8000b3e:	4770      	bx	lr

08000b40 <__retarget_lock_release_recursive>:
 8000b40:	4770      	bx	lr
	...

08000b44 <_free_r>:
 8000b44:	b538      	push	{r3, r4, r5, lr}
 8000b46:	4605      	mov	r5, r0
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	d041      	beq.n	8000bd0 <_free_r+0x8c>
 8000b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b50:	1f0c      	subs	r4, r1, #4
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bfb8      	it	lt
 8000b56:	18e4      	addlt	r4, r4, r3
 8000b58:	f000 f8e0 	bl	8000d1c <__malloc_lock>
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <_free_r+0x90>)
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	b933      	cbnz	r3, 8000b70 <_free_r+0x2c>
 8000b62:	6063      	str	r3, [r4, #4]
 8000b64:	6014      	str	r4, [r2, #0]
 8000b66:	4628      	mov	r0, r5
 8000b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b6c:	f000 b8dc 	b.w	8000d28 <__malloc_unlock>
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	d908      	bls.n	8000b86 <_free_r+0x42>
 8000b74:	6820      	ldr	r0, [r4, #0]
 8000b76:	1821      	adds	r1, r4, r0
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf01      	itttt	eq
 8000b7c:	6819      	ldreq	r1, [r3, #0]
 8000b7e:	685b      	ldreq	r3, [r3, #4]
 8000b80:	1809      	addeq	r1, r1, r0
 8000b82:	6021      	streq	r1, [r4, #0]
 8000b84:	e7ed      	b.n	8000b62 <_free_r+0x1e>
 8000b86:	461a      	mov	r2, r3
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	b10b      	cbz	r3, 8000b90 <_free_r+0x4c>
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	d9fa      	bls.n	8000b86 <_free_r+0x42>
 8000b90:	6811      	ldr	r1, [r2, #0]
 8000b92:	1850      	adds	r0, r2, r1
 8000b94:	42a0      	cmp	r0, r4
 8000b96:	d10b      	bne.n	8000bb0 <_free_r+0x6c>
 8000b98:	6820      	ldr	r0, [r4, #0]
 8000b9a:	4401      	add	r1, r0
 8000b9c:	1850      	adds	r0, r2, r1
 8000b9e:	4283      	cmp	r3, r0
 8000ba0:	6011      	str	r1, [r2, #0]
 8000ba2:	d1e0      	bne.n	8000b66 <_free_r+0x22>
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	6053      	str	r3, [r2, #4]
 8000baa:	4408      	add	r0, r1
 8000bac:	6010      	str	r0, [r2, #0]
 8000bae:	e7da      	b.n	8000b66 <_free_r+0x22>
 8000bb0:	d902      	bls.n	8000bb8 <_free_r+0x74>
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	602b      	str	r3, [r5, #0]
 8000bb6:	e7d6      	b.n	8000b66 <_free_r+0x22>
 8000bb8:	6820      	ldr	r0, [r4, #0]
 8000bba:	1821      	adds	r1, r4, r0
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	bf04      	itt	eq
 8000bc0:	6819      	ldreq	r1, [r3, #0]
 8000bc2:	685b      	ldreq	r3, [r3, #4]
 8000bc4:	6063      	str	r3, [r4, #4]
 8000bc6:	bf04      	itt	eq
 8000bc8:	1809      	addeq	r1, r1, r0
 8000bca:	6021      	streq	r1, [r4, #0]
 8000bcc:	6054      	str	r4, [r2, #4]
 8000bce:	e7ca      	b.n	8000b66 <_free_r+0x22>
 8000bd0:	bd38      	pop	{r3, r4, r5, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200001c4 	.word	0x200001c4

08000bd8 <sbrk_aligned>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	4e0f      	ldr	r6, [pc, #60]	@ (8000c18 <sbrk_aligned+0x40>)
 8000bdc:	460c      	mov	r4, r1
 8000bde:	6831      	ldr	r1, [r6, #0]
 8000be0:	4605      	mov	r5, r0
 8000be2:	b911      	cbnz	r1, 8000bea <sbrk_aligned+0x12>
 8000be4:	f000 fca6 	bl	8001534 <_sbrk_r>
 8000be8:	6030      	str	r0, [r6, #0]
 8000bea:	4621      	mov	r1, r4
 8000bec:	4628      	mov	r0, r5
 8000bee:	f000 fca1 	bl	8001534 <_sbrk_r>
 8000bf2:	1c43      	adds	r3, r0, #1
 8000bf4:	d103      	bne.n	8000bfe <sbrk_aligned+0x26>
 8000bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
 8000bfe:	1cc4      	adds	r4, r0, #3
 8000c00:	f024 0403 	bic.w	r4, r4, #3
 8000c04:	42a0      	cmp	r0, r4
 8000c06:	d0f8      	beq.n	8000bfa <sbrk_aligned+0x22>
 8000c08:	1a21      	subs	r1, r4, r0
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f000 fc92 	bl	8001534 <_sbrk_r>
 8000c10:	3001      	adds	r0, #1
 8000c12:	d1f2      	bne.n	8000bfa <sbrk_aligned+0x22>
 8000c14:	e7ef      	b.n	8000bf6 <sbrk_aligned+0x1e>
 8000c16:	bf00      	nop
 8000c18:	200001c0 	.word	0x200001c0

08000c1c <_malloc_r>:
 8000c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c20:	1ccd      	adds	r5, r1, #3
 8000c22:	f025 0503 	bic.w	r5, r5, #3
 8000c26:	3508      	adds	r5, #8
 8000c28:	2d0c      	cmp	r5, #12
 8000c2a:	bf38      	it	cc
 8000c2c:	250c      	movcc	r5, #12
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	4606      	mov	r6, r0
 8000c32:	db01      	blt.n	8000c38 <_malloc_r+0x1c>
 8000c34:	42a9      	cmp	r1, r5
 8000c36:	d904      	bls.n	8000c42 <_malloc_r+0x26>
 8000c38:	230c      	movs	r3, #12
 8000c3a:	6033      	str	r3, [r6, #0]
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d18 <_malloc_r+0xfc>
 8000c46:	f000 f869 	bl	8000d1c <__malloc_lock>
 8000c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c4e:	461c      	mov	r4, r3
 8000c50:	bb44      	cbnz	r4, 8000ca4 <_malloc_r+0x88>
 8000c52:	4629      	mov	r1, r5
 8000c54:	4630      	mov	r0, r6
 8000c56:	f7ff ffbf 	bl	8000bd8 <sbrk_aligned>
 8000c5a:	1c43      	adds	r3, r0, #1
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	d158      	bne.n	8000d12 <_malloc_r+0xf6>
 8000c60:	f8d8 4000 	ldr.w	r4, [r8]
 8000c64:	4627      	mov	r7, r4
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d143      	bne.n	8000cf2 <_malloc_r+0xd6>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d04b      	beq.n	8000d06 <_malloc_r+0xea>
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	4639      	mov	r1, r7
 8000c72:	4630      	mov	r0, r6
 8000c74:	eb04 0903 	add.w	r9, r4, r3
 8000c78:	f000 fc5c 	bl	8001534 <_sbrk_r>
 8000c7c:	4581      	cmp	r9, r0
 8000c7e:	d142      	bne.n	8000d06 <_malloc_r+0xea>
 8000c80:	6821      	ldr	r1, [r4, #0]
 8000c82:	1a6d      	subs	r5, r5, r1
 8000c84:	4629      	mov	r1, r5
 8000c86:	4630      	mov	r0, r6
 8000c88:	f7ff ffa6 	bl	8000bd8 <sbrk_aligned>
 8000c8c:	3001      	adds	r0, #1
 8000c8e:	d03a      	beq.n	8000d06 <_malloc_r+0xea>
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	442b      	add	r3, r5
 8000c94:	6023      	str	r3, [r4, #0]
 8000c96:	f8d8 3000 	ldr.w	r3, [r8]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	bb62      	cbnz	r2, 8000cf8 <_malloc_r+0xdc>
 8000c9e:	f8c8 7000 	str.w	r7, [r8]
 8000ca2:	e00f      	b.n	8000cc4 <_malloc_r+0xa8>
 8000ca4:	6822      	ldr	r2, [r4, #0]
 8000ca6:	1b52      	subs	r2, r2, r5
 8000ca8:	d420      	bmi.n	8000cec <_malloc_r+0xd0>
 8000caa:	2a0b      	cmp	r2, #11
 8000cac:	d917      	bls.n	8000cde <_malloc_r+0xc2>
 8000cae:	1961      	adds	r1, r4, r5
 8000cb0:	42a3      	cmp	r3, r4
 8000cb2:	6025      	str	r5, [r4, #0]
 8000cb4:	bf18      	it	ne
 8000cb6:	6059      	strne	r1, [r3, #4]
 8000cb8:	6863      	ldr	r3, [r4, #4]
 8000cba:	bf08      	it	eq
 8000cbc:	f8c8 1000 	streq.w	r1, [r8]
 8000cc0:	5162      	str	r2, [r4, r5]
 8000cc2:	604b      	str	r3, [r1, #4]
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	f000 f82f 	bl	8000d28 <__malloc_unlock>
 8000cca:	f104 000b 	add.w	r0, r4, #11
 8000cce:	1d23      	adds	r3, r4, #4
 8000cd0:	f020 0007 	bic.w	r0, r0, #7
 8000cd4:	1ac2      	subs	r2, r0, r3
 8000cd6:	bf1c      	itt	ne
 8000cd8:	1a1b      	subne	r3, r3, r0
 8000cda:	50a3      	strne	r3, [r4, r2]
 8000cdc:	e7af      	b.n	8000c3e <_malloc_r+0x22>
 8000cde:	6862      	ldr	r2, [r4, #4]
 8000ce0:	42a3      	cmp	r3, r4
 8000ce2:	bf0c      	ite	eq
 8000ce4:	f8c8 2000 	streq.w	r2, [r8]
 8000ce8:	605a      	strne	r2, [r3, #4]
 8000cea:	e7eb      	b.n	8000cc4 <_malloc_r+0xa8>
 8000cec:	4623      	mov	r3, r4
 8000cee:	6864      	ldr	r4, [r4, #4]
 8000cf0:	e7ae      	b.n	8000c50 <_malloc_r+0x34>
 8000cf2:	463c      	mov	r4, r7
 8000cf4:	687f      	ldr	r7, [r7, #4]
 8000cf6:	e7b6      	b.n	8000c66 <_malloc_r+0x4a>
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d1fb      	bne.n	8000cf8 <_malloc_r+0xdc>
 8000d00:	2300      	movs	r3, #0
 8000d02:	6053      	str	r3, [r2, #4]
 8000d04:	e7de      	b.n	8000cc4 <_malloc_r+0xa8>
 8000d06:	230c      	movs	r3, #12
 8000d08:	6033      	str	r3, [r6, #0]
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	f000 f80c 	bl	8000d28 <__malloc_unlock>
 8000d10:	e794      	b.n	8000c3c <_malloc_r+0x20>
 8000d12:	6005      	str	r5, [r0, #0]
 8000d14:	e7d6      	b.n	8000cc4 <_malloc_r+0xa8>
 8000d16:	bf00      	nop
 8000d18:	200001c4 	.word	0x200001c4

08000d1c <__malloc_lock>:
 8000d1c:	4801      	ldr	r0, [pc, #4]	@ (8000d24 <__malloc_lock+0x8>)
 8000d1e:	f7ff bf0e 	b.w	8000b3e <__retarget_lock_acquire_recursive>
 8000d22:	bf00      	nop
 8000d24:	200001bc 	.word	0x200001bc

08000d28 <__malloc_unlock>:
 8000d28:	4801      	ldr	r0, [pc, #4]	@ (8000d30 <__malloc_unlock+0x8>)
 8000d2a:	f7ff bf09 	b.w	8000b40 <__retarget_lock_release_recursive>
 8000d2e:	bf00      	nop
 8000d30:	200001bc 	.word	0x200001bc

08000d34 <__sfputc_r>:
 8000d34:	6893      	ldr	r3, [r2, #8]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	b410      	push	{r4}
 8000d3c:	6093      	str	r3, [r2, #8]
 8000d3e:	da08      	bge.n	8000d52 <__sfputc_r+0x1e>
 8000d40:	6994      	ldr	r4, [r2, #24]
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	db01      	blt.n	8000d4a <__sfputc_r+0x16>
 8000d46:	290a      	cmp	r1, #10
 8000d48:	d103      	bne.n	8000d52 <__sfputc_r+0x1e>
 8000d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d4e:	f7ff bde8 	b.w	8000922 <__swbuf_r>
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	1c58      	adds	r0, r3, #1
 8000d56:	6010      	str	r0, [r2, #0]
 8000d58:	7019      	strb	r1, [r3, #0]
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <__sfputs_r>:
 8000d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d64:	4606      	mov	r6, r0
 8000d66:	460f      	mov	r7, r1
 8000d68:	4614      	mov	r4, r2
 8000d6a:	18d5      	adds	r5, r2, r3
 8000d6c:	42ac      	cmp	r4, r5
 8000d6e:	d101      	bne.n	8000d74 <__sfputs_r+0x12>
 8000d70:	2000      	movs	r0, #0
 8000d72:	e007      	b.n	8000d84 <__sfputs_r+0x22>
 8000d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d78:	463a      	mov	r2, r7
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	f7ff ffda 	bl	8000d34 <__sfputc_r>
 8000d80:	1c43      	adds	r3, r0, #1
 8000d82:	d1f3      	bne.n	8000d6c <__sfputs_r+0xa>
 8000d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d88 <_vfiprintf_r>:
 8000d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d8c:	460d      	mov	r5, r1
 8000d8e:	b09d      	sub	sp, #116	@ 0x74
 8000d90:	4614      	mov	r4, r2
 8000d92:	4698      	mov	r8, r3
 8000d94:	4606      	mov	r6, r0
 8000d96:	b118      	cbz	r0, 8000da0 <_vfiprintf_r+0x18>
 8000d98:	6a03      	ldr	r3, [r0, #32]
 8000d9a:	b90b      	cbnz	r3, 8000da0 <_vfiprintf_r+0x18>
 8000d9c:	f7ff fcd8 	bl	8000750 <__sinit>
 8000da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000da2:	07d9      	lsls	r1, r3, #31
 8000da4:	d405      	bmi.n	8000db2 <_vfiprintf_r+0x2a>
 8000da6:	89ab      	ldrh	r3, [r5, #12]
 8000da8:	059a      	lsls	r2, r3, #22
 8000daa:	d402      	bmi.n	8000db2 <_vfiprintf_r+0x2a>
 8000dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dae:	f7ff fec6 	bl	8000b3e <__retarget_lock_acquire_recursive>
 8000db2:	89ab      	ldrh	r3, [r5, #12]
 8000db4:	071b      	lsls	r3, r3, #28
 8000db6:	d501      	bpl.n	8000dbc <_vfiprintf_r+0x34>
 8000db8:	692b      	ldr	r3, [r5, #16]
 8000dba:	b99b      	cbnz	r3, 8000de4 <_vfiprintf_r+0x5c>
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f7ff fdee 	bl	80009a0 <__swsetup_r>
 8000dc4:	b170      	cbz	r0, 8000de4 <_vfiprintf_r+0x5c>
 8000dc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dc8:	07dc      	lsls	r4, r3, #31
 8000dca:	d504      	bpl.n	8000dd6 <_vfiprintf_r+0x4e>
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	b01d      	add	sp, #116	@ 0x74
 8000dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd6:	89ab      	ldrh	r3, [r5, #12]
 8000dd8:	0598      	lsls	r0, r3, #22
 8000dda:	d4f7      	bmi.n	8000dcc <_vfiprintf_r+0x44>
 8000ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dde:	f7ff feaf 	bl	8000b40 <__retarget_lock_release_recursive>
 8000de2:	e7f3      	b.n	8000dcc <_vfiprintf_r+0x44>
 8000de4:	2300      	movs	r3, #0
 8000de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000de8:	2320      	movs	r3, #32
 8000dea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8000df2:	2330      	movs	r3, #48	@ 0x30
 8000df4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000fa4 <_vfiprintf_r+0x21c>
 8000df8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000dfc:	f04f 0901 	mov.w	r9, #1
 8000e00:	4623      	mov	r3, r4
 8000e02:	469a      	mov	sl, r3
 8000e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e08:	b10a      	cbz	r2, 8000e0e <_vfiprintf_r+0x86>
 8000e0a:	2a25      	cmp	r2, #37	@ 0x25
 8000e0c:	d1f9      	bne.n	8000e02 <_vfiprintf_r+0x7a>
 8000e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8000e12:	d00b      	beq.n	8000e2c <_vfiprintf_r+0xa4>
 8000e14:	465b      	mov	r3, fp
 8000e16:	4622      	mov	r2, r4
 8000e18:	4629      	mov	r1, r5
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	f7ff ffa1 	bl	8000d62 <__sfputs_r>
 8000e20:	3001      	adds	r0, #1
 8000e22:	f000 80a7 	beq.w	8000f74 <_vfiprintf_r+0x1ec>
 8000e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e28:	445a      	add	r2, fp
 8000e2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 809f 	beq.w	8000f74 <_vfiprintf_r+0x1ec>
 8000e36:	2300      	movs	r3, #0
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e40:	f10a 0a01 	add.w	sl, sl, #1
 8000e44:	9304      	str	r3, [sp, #16]
 8000e46:	9307      	str	r3, [sp, #28]
 8000e48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e4e:	4654      	mov	r4, sl
 8000e50:	2205      	movs	r2, #5
 8000e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e56:	4853      	ldr	r0, [pc, #332]	@ (8000fa4 <_vfiprintf_r+0x21c>)
 8000e58:	f7ff f9c2 	bl	80001e0 <memchr>
 8000e5c:	9a04      	ldr	r2, [sp, #16]
 8000e5e:	b9d8      	cbnz	r0, 8000e98 <_vfiprintf_r+0x110>
 8000e60:	06d1      	lsls	r1, r2, #27
 8000e62:	bf44      	itt	mi
 8000e64:	2320      	movmi	r3, #32
 8000e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e6a:	0713      	lsls	r3, r2, #28
 8000e6c:	bf44      	itt	mi
 8000e6e:	232b      	movmi	r3, #43	@ 0x2b
 8000e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e74:	f89a 3000 	ldrb.w	r3, [sl]
 8000e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e7a:	d015      	beq.n	8000ea8 <_vfiprintf_r+0x120>
 8000e7c:	9a07      	ldr	r2, [sp, #28]
 8000e7e:	4654      	mov	r4, sl
 8000e80:	2000      	movs	r0, #0
 8000e82:	f04f 0c0a 	mov.w	ip, #10
 8000e86:	4621      	mov	r1, r4
 8000e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e8c:	3b30      	subs	r3, #48	@ 0x30
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	d94b      	bls.n	8000f2a <_vfiprintf_r+0x1a2>
 8000e92:	b1b0      	cbz	r0, 8000ec2 <_vfiprintf_r+0x13a>
 8000e94:	9207      	str	r2, [sp, #28]
 8000e96:	e014      	b.n	8000ec2 <_vfiprintf_r+0x13a>
 8000e98:	eba0 0308 	sub.w	r3, r0, r8
 8000e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	9304      	str	r3, [sp, #16]
 8000ea4:	46a2      	mov	sl, r4
 8000ea6:	e7d2      	b.n	8000e4e <_vfiprintf_r+0xc6>
 8000ea8:	9b03      	ldr	r3, [sp, #12]
 8000eaa:	1d19      	adds	r1, r3, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	9103      	str	r1, [sp, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bfbb      	ittet	lt
 8000eb4:	425b      	neglt	r3, r3
 8000eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8000eba:	9307      	strge	r3, [sp, #28]
 8000ebc:	9307      	strlt	r3, [sp, #28]
 8000ebe:	bfb8      	it	lt
 8000ec0:	9204      	strlt	r2, [sp, #16]
 8000ec2:	7823      	ldrb	r3, [r4, #0]
 8000ec4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ec6:	d10a      	bne.n	8000ede <_vfiprintf_r+0x156>
 8000ec8:	7863      	ldrb	r3, [r4, #1]
 8000eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ecc:	d132      	bne.n	8000f34 <_vfiprintf_r+0x1ac>
 8000ece:	9b03      	ldr	r3, [sp, #12]
 8000ed0:	1d1a      	adds	r2, r3, #4
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	9203      	str	r2, [sp, #12]
 8000ed6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000eda:	3402      	adds	r4, #2
 8000edc:	9305      	str	r3, [sp, #20]
 8000ede:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000fb4 <_vfiprintf_r+0x22c>
 8000ee2:	7821      	ldrb	r1, [r4, #0]
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	f7ff f97a 	bl	80001e0 <memchr>
 8000eec:	b138      	cbz	r0, 8000efe <_vfiprintf_r+0x176>
 8000eee:	9b04      	ldr	r3, [sp, #16]
 8000ef0:	eba0 000a 	sub.w	r0, r0, sl
 8000ef4:	2240      	movs	r2, #64	@ 0x40
 8000ef6:	4082      	lsls	r2, r0
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	3401      	adds	r4, #1
 8000efc:	9304      	str	r3, [sp, #16]
 8000efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f02:	4829      	ldr	r0, [pc, #164]	@ (8000fa8 <_vfiprintf_r+0x220>)
 8000f04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f08:	2206      	movs	r2, #6
 8000f0a:	f7ff f969 	bl	80001e0 <memchr>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d03f      	beq.n	8000f92 <_vfiprintf_r+0x20a>
 8000f12:	4b26      	ldr	r3, [pc, #152]	@ (8000fac <_vfiprintf_r+0x224>)
 8000f14:	bb1b      	cbnz	r3, 8000f5e <_vfiprintf_r+0x1d6>
 8000f16:	9b03      	ldr	r3, [sp, #12]
 8000f18:	3307      	adds	r3, #7
 8000f1a:	f023 0307 	bic.w	r3, r3, #7
 8000f1e:	3308      	adds	r3, #8
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f24:	443b      	add	r3, r7
 8000f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f28:	e76a      	b.n	8000e00 <_vfiprintf_r+0x78>
 8000f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f2e:	460c      	mov	r4, r1
 8000f30:	2001      	movs	r0, #1
 8000f32:	e7a8      	b.n	8000e86 <_vfiprintf_r+0xfe>
 8000f34:	2300      	movs	r3, #0
 8000f36:	3401      	adds	r4, #1
 8000f38:	9305      	str	r3, [sp, #20]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 0c0a 	mov.w	ip, #10
 8000f40:	4620      	mov	r0, r4
 8000f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f46:	3a30      	subs	r2, #48	@ 0x30
 8000f48:	2a09      	cmp	r2, #9
 8000f4a:	d903      	bls.n	8000f54 <_vfiprintf_r+0x1cc>
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0c6      	beq.n	8000ede <_vfiprintf_r+0x156>
 8000f50:	9105      	str	r1, [sp, #20]
 8000f52:	e7c4      	b.n	8000ede <_vfiprintf_r+0x156>
 8000f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f58:	4604      	mov	r4, r0
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e7f0      	b.n	8000f40 <_vfiprintf_r+0x1b8>
 8000f5e:	ab03      	add	r3, sp, #12
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	462a      	mov	r2, r5
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <_vfiprintf_r+0x228>)
 8000f66:	a904      	add	r1, sp, #16
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f3af 8000 	nop.w
 8000f6e:	4607      	mov	r7, r0
 8000f70:	1c78      	adds	r0, r7, #1
 8000f72:	d1d6      	bne.n	8000f22 <_vfiprintf_r+0x19a>
 8000f74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f76:	07d9      	lsls	r1, r3, #31
 8000f78:	d405      	bmi.n	8000f86 <_vfiprintf_r+0x1fe>
 8000f7a:	89ab      	ldrh	r3, [r5, #12]
 8000f7c:	059a      	lsls	r2, r3, #22
 8000f7e:	d402      	bmi.n	8000f86 <_vfiprintf_r+0x1fe>
 8000f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f82:	f7ff fddd 	bl	8000b40 <__retarget_lock_release_recursive>
 8000f86:	89ab      	ldrh	r3, [r5, #12]
 8000f88:	065b      	lsls	r3, r3, #25
 8000f8a:	f53f af1f 	bmi.w	8000dcc <_vfiprintf_r+0x44>
 8000f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f90:	e71e      	b.n	8000dd0 <_vfiprintf_r+0x48>
 8000f92:	ab03      	add	r3, sp, #12
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	462a      	mov	r2, r5
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <_vfiprintf_r+0x228>)
 8000f9a:	a904      	add	r1, sp, #16
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f000 f879 	bl	8001094 <_printf_i>
 8000fa2:	e7e4      	b.n	8000f6e <_vfiprintf_r+0x1e6>
 8000fa4:	08001623 	.word	0x08001623
 8000fa8:	0800162d 	.word	0x0800162d
 8000fac:	00000000 	.word	0x00000000
 8000fb0:	08000d63 	.word	0x08000d63
 8000fb4:	08001629 	.word	0x08001629

08000fb8 <_printf_common>:
 8000fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fbc:	4616      	mov	r6, r2
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	688a      	ldr	r2, [r1, #8]
 8000fc2:	690b      	ldr	r3, [r1, #16]
 8000fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	bfb8      	it	lt
 8000fcc:	4613      	movlt	r3, r2
 8000fce:	6033      	str	r3, [r6, #0]
 8000fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000fd4:	4607      	mov	r7, r0
 8000fd6:	460c      	mov	r4, r1
 8000fd8:	b10a      	cbz	r2, 8000fde <_printf_common+0x26>
 8000fda:	3301      	adds	r3, #1
 8000fdc:	6033      	str	r3, [r6, #0]
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	0699      	lsls	r1, r3, #26
 8000fe2:	bf42      	ittt	mi
 8000fe4:	6833      	ldrmi	r3, [r6, #0]
 8000fe6:	3302      	addmi	r3, #2
 8000fe8:	6033      	strmi	r3, [r6, #0]
 8000fea:	6825      	ldr	r5, [r4, #0]
 8000fec:	f015 0506 	ands.w	r5, r5, #6
 8000ff0:	d106      	bne.n	8001000 <_printf_common+0x48>
 8000ff2:	f104 0a19 	add.w	sl, r4, #25
 8000ff6:	68e3      	ldr	r3, [r4, #12]
 8000ff8:	6832      	ldr	r2, [r6, #0]
 8000ffa:	1a9b      	subs	r3, r3, r2
 8000ffc:	42ab      	cmp	r3, r5
 8000ffe:	dc26      	bgt.n	800104e <_printf_common+0x96>
 8001000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001004:	6822      	ldr	r2, [r4, #0]
 8001006:	3b00      	subs	r3, #0
 8001008:	bf18      	it	ne
 800100a:	2301      	movne	r3, #1
 800100c:	0692      	lsls	r2, r2, #26
 800100e:	d42b      	bmi.n	8001068 <_printf_common+0xb0>
 8001010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001014:	4641      	mov	r1, r8
 8001016:	4638      	mov	r0, r7
 8001018:	47c8      	blx	r9
 800101a:	3001      	adds	r0, #1
 800101c:	d01e      	beq.n	800105c <_printf_common+0xa4>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	6922      	ldr	r2, [r4, #16]
 8001022:	f003 0306 	and.w	r3, r3, #6
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf02      	ittt	eq
 800102a:	68e5      	ldreq	r5, [r4, #12]
 800102c:	6833      	ldreq	r3, [r6, #0]
 800102e:	1aed      	subeq	r5, r5, r3
 8001030:	68a3      	ldr	r3, [r4, #8]
 8001032:	bf0c      	ite	eq
 8001034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001038:	2500      	movne	r5, #0
 800103a:	4293      	cmp	r3, r2
 800103c:	bfc4      	itt	gt
 800103e:	1a9b      	subgt	r3, r3, r2
 8001040:	18ed      	addgt	r5, r5, r3
 8001042:	2600      	movs	r6, #0
 8001044:	341a      	adds	r4, #26
 8001046:	42b5      	cmp	r5, r6
 8001048:	d11a      	bne.n	8001080 <_printf_common+0xc8>
 800104a:	2000      	movs	r0, #0
 800104c:	e008      	b.n	8001060 <_printf_common+0xa8>
 800104e:	2301      	movs	r3, #1
 8001050:	4652      	mov	r2, sl
 8001052:	4641      	mov	r1, r8
 8001054:	4638      	mov	r0, r7
 8001056:	47c8      	blx	r9
 8001058:	3001      	adds	r0, #1
 800105a:	d103      	bne.n	8001064 <_printf_common+0xac>
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001064:	3501      	adds	r5, #1
 8001066:	e7c6      	b.n	8000ff6 <_printf_common+0x3e>
 8001068:	18e1      	adds	r1, r4, r3
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	2030      	movs	r0, #48	@ 0x30
 800106e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001072:	4422      	add	r2, r4
 8001074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800107c:	3302      	adds	r3, #2
 800107e:	e7c7      	b.n	8001010 <_printf_common+0x58>
 8001080:	2301      	movs	r3, #1
 8001082:	4622      	mov	r2, r4
 8001084:	4641      	mov	r1, r8
 8001086:	4638      	mov	r0, r7
 8001088:	47c8      	blx	r9
 800108a:	3001      	adds	r0, #1
 800108c:	d0e6      	beq.n	800105c <_printf_common+0xa4>
 800108e:	3601      	adds	r6, #1
 8001090:	e7d9      	b.n	8001046 <_printf_common+0x8e>
	...

08001094 <_printf_i>:
 8001094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001098:	7e0f      	ldrb	r7, [r1, #24]
 800109a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800109c:	2f78      	cmp	r7, #120	@ 0x78
 800109e:	4691      	mov	r9, r2
 80010a0:	4680      	mov	r8, r0
 80010a2:	460c      	mov	r4, r1
 80010a4:	469a      	mov	sl, r3
 80010a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80010aa:	d807      	bhi.n	80010bc <_printf_i+0x28>
 80010ac:	2f62      	cmp	r7, #98	@ 0x62
 80010ae:	d80a      	bhi.n	80010c6 <_printf_i+0x32>
 80010b0:	2f00      	cmp	r7, #0
 80010b2:	f000 80d2 	beq.w	800125a <_printf_i+0x1c6>
 80010b6:	2f58      	cmp	r7, #88	@ 0x58
 80010b8:	f000 80b9 	beq.w	800122e <_printf_i+0x19a>
 80010bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80010c4:	e03a      	b.n	800113c <_printf_i+0xa8>
 80010c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80010ca:	2b15      	cmp	r3, #21
 80010cc:	d8f6      	bhi.n	80010bc <_printf_i+0x28>
 80010ce:	a101      	add	r1, pc, #4	@ (adr r1, 80010d4 <_printf_i+0x40>)
 80010d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010d4:	0800112d 	.word	0x0800112d
 80010d8:	08001141 	.word	0x08001141
 80010dc:	080010bd 	.word	0x080010bd
 80010e0:	080010bd 	.word	0x080010bd
 80010e4:	080010bd 	.word	0x080010bd
 80010e8:	080010bd 	.word	0x080010bd
 80010ec:	08001141 	.word	0x08001141
 80010f0:	080010bd 	.word	0x080010bd
 80010f4:	080010bd 	.word	0x080010bd
 80010f8:	080010bd 	.word	0x080010bd
 80010fc:	080010bd 	.word	0x080010bd
 8001100:	08001241 	.word	0x08001241
 8001104:	0800116b 	.word	0x0800116b
 8001108:	080011fb 	.word	0x080011fb
 800110c:	080010bd 	.word	0x080010bd
 8001110:	080010bd 	.word	0x080010bd
 8001114:	08001263 	.word	0x08001263
 8001118:	080010bd 	.word	0x080010bd
 800111c:	0800116b 	.word	0x0800116b
 8001120:	080010bd 	.word	0x080010bd
 8001124:	080010bd 	.word	0x080010bd
 8001128:	08001203 	.word	0x08001203
 800112c:	6833      	ldr	r3, [r6, #0]
 800112e:	1d1a      	adds	r2, r3, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6032      	str	r2, [r6, #0]
 8001134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800113c:	2301      	movs	r3, #1
 800113e:	e09d      	b.n	800127c <_printf_i+0x1e8>
 8001140:	6833      	ldr	r3, [r6, #0]
 8001142:	6820      	ldr	r0, [r4, #0]
 8001144:	1d19      	adds	r1, r3, #4
 8001146:	6031      	str	r1, [r6, #0]
 8001148:	0606      	lsls	r6, r0, #24
 800114a:	d501      	bpl.n	8001150 <_printf_i+0xbc>
 800114c:	681d      	ldr	r5, [r3, #0]
 800114e:	e003      	b.n	8001158 <_printf_i+0xc4>
 8001150:	0645      	lsls	r5, r0, #25
 8001152:	d5fb      	bpl.n	800114c <_printf_i+0xb8>
 8001154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001158:	2d00      	cmp	r5, #0
 800115a:	da03      	bge.n	8001164 <_printf_i+0xd0>
 800115c:	232d      	movs	r3, #45	@ 0x2d
 800115e:	426d      	negs	r5, r5
 8001160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001164:	4859      	ldr	r0, [pc, #356]	@ (80012cc <_printf_i+0x238>)
 8001166:	230a      	movs	r3, #10
 8001168:	e011      	b.n	800118e <_printf_i+0xfa>
 800116a:	6821      	ldr	r1, [r4, #0]
 800116c:	6833      	ldr	r3, [r6, #0]
 800116e:	0608      	lsls	r0, r1, #24
 8001170:	f853 5b04 	ldr.w	r5, [r3], #4
 8001174:	d402      	bmi.n	800117c <_printf_i+0xe8>
 8001176:	0649      	lsls	r1, r1, #25
 8001178:	bf48      	it	mi
 800117a:	b2ad      	uxthmi	r5, r5
 800117c:	2f6f      	cmp	r7, #111	@ 0x6f
 800117e:	4853      	ldr	r0, [pc, #332]	@ (80012cc <_printf_i+0x238>)
 8001180:	6033      	str	r3, [r6, #0]
 8001182:	bf14      	ite	ne
 8001184:	230a      	movne	r3, #10
 8001186:	2308      	moveq	r3, #8
 8001188:	2100      	movs	r1, #0
 800118a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800118e:	6866      	ldr	r6, [r4, #4]
 8001190:	60a6      	str	r6, [r4, #8]
 8001192:	2e00      	cmp	r6, #0
 8001194:	bfa2      	ittt	ge
 8001196:	6821      	ldrge	r1, [r4, #0]
 8001198:	f021 0104 	bicge.w	r1, r1, #4
 800119c:	6021      	strge	r1, [r4, #0]
 800119e:	b90d      	cbnz	r5, 80011a4 <_printf_i+0x110>
 80011a0:	2e00      	cmp	r6, #0
 80011a2:	d04b      	beq.n	800123c <_printf_i+0x1a8>
 80011a4:	4616      	mov	r6, r2
 80011a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80011aa:	fb03 5711 	mls	r7, r3, r1, r5
 80011ae:	5dc7      	ldrb	r7, [r0, r7]
 80011b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80011b4:	462f      	mov	r7, r5
 80011b6:	42bb      	cmp	r3, r7
 80011b8:	460d      	mov	r5, r1
 80011ba:	d9f4      	bls.n	80011a6 <_printf_i+0x112>
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d10b      	bne.n	80011d8 <_printf_i+0x144>
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	07df      	lsls	r7, r3, #31
 80011c4:	d508      	bpl.n	80011d8 <_printf_i+0x144>
 80011c6:	6923      	ldr	r3, [r4, #16]
 80011c8:	6861      	ldr	r1, [r4, #4]
 80011ca:	4299      	cmp	r1, r3
 80011cc:	bfde      	ittt	le
 80011ce:	2330      	movle	r3, #48	@ 0x30
 80011d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80011d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80011d8:	1b92      	subs	r2, r2, r6
 80011da:	6122      	str	r2, [r4, #16]
 80011dc:	f8cd a000 	str.w	sl, [sp]
 80011e0:	464b      	mov	r3, r9
 80011e2:	aa03      	add	r2, sp, #12
 80011e4:	4621      	mov	r1, r4
 80011e6:	4640      	mov	r0, r8
 80011e8:	f7ff fee6 	bl	8000fb8 <_printf_common>
 80011ec:	3001      	adds	r0, #1
 80011ee:	d14a      	bne.n	8001286 <_printf_i+0x1f2>
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	b004      	add	sp, #16
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	6023      	str	r3, [r4, #0]
 8001202:	4833      	ldr	r0, [pc, #204]	@ (80012d0 <_printf_i+0x23c>)
 8001204:	2778      	movs	r7, #120	@ 0x78
 8001206:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	6831      	ldr	r1, [r6, #0]
 800120e:	061f      	lsls	r7, r3, #24
 8001210:	f851 5b04 	ldr.w	r5, [r1], #4
 8001214:	d402      	bmi.n	800121c <_printf_i+0x188>
 8001216:	065f      	lsls	r7, r3, #25
 8001218:	bf48      	it	mi
 800121a:	b2ad      	uxthmi	r5, r5
 800121c:	6031      	str	r1, [r6, #0]
 800121e:	07d9      	lsls	r1, r3, #31
 8001220:	bf44      	itt	mi
 8001222:	f043 0320 	orrmi.w	r3, r3, #32
 8001226:	6023      	strmi	r3, [r4, #0]
 8001228:	b11d      	cbz	r5, 8001232 <_printf_i+0x19e>
 800122a:	2310      	movs	r3, #16
 800122c:	e7ac      	b.n	8001188 <_printf_i+0xf4>
 800122e:	4827      	ldr	r0, [pc, #156]	@ (80012cc <_printf_i+0x238>)
 8001230:	e7e9      	b.n	8001206 <_printf_i+0x172>
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	f023 0320 	bic.w	r3, r3, #32
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	e7f6      	b.n	800122a <_printf_i+0x196>
 800123c:	4616      	mov	r6, r2
 800123e:	e7bd      	b.n	80011bc <_printf_i+0x128>
 8001240:	6833      	ldr	r3, [r6, #0]
 8001242:	6825      	ldr	r5, [r4, #0]
 8001244:	6961      	ldr	r1, [r4, #20]
 8001246:	1d18      	adds	r0, r3, #4
 8001248:	6030      	str	r0, [r6, #0]
 800124a:	062e      	lsls	r6, r5, #24
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	d501      	bpl.n	8001254 <_printf_i+0x1c0>
 8001250:	6019      	str	r1, [r3, #0]
 8001252:	e002      	b.n	800125a <_printf_i+0x1c6>
 8001254:	0668      	lsls	r0, r5, #25
 8001256:	d5fb      	bpl.n	8001250 <_printf_i+0x1bc>
 8001258:	8019      	strh	r1, [r3, #0]
 800125a:	2300      	movs	r3, #0
 800125c:	6123      	str	r3, [r4, #16]
 800125e:	4616      	mov	r6, r2
 8001260:	e7bc      	b.n	80011dc <_printf_i+0x148>
 8001262:	6833      	ldr	r3, [r6, #0]
 8001264:	1d1a      	adds	r2, r3, #4
 8001266:	6032      	str	r2, [r6, #0]
 8001268:	681e      	ldr	r6, [r3, #0]
 800126a:	6862      	ldr	r2, [r4, #4]
 800126c:	2100      	movs	r1, #0
 800126e:	4630      	mov	r0, r6
 8001270:	f7fe ffb6 	bl	80001e0 <memchr>
 8001274:	b108      	cbz	r0, 800127a <_printf_i+0x1e6>
 8001276:	1b80      	subs	r0, r0, r6
 8001278:	6060      	str	r0, [r4, #4]
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	6123      	str	r3, [r4, #16]
 800127e:	2300      	movs	r3, #0
 8001280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001284:	e7aa      	b.n	80011dc <_printf_i+0x148>
 8001286:	6923      	ldr	r3, [r4, #16]
 8001288:	4632      	mov	r2, r6
 800128a:	4649      	mov	r1, r9
 800128c:	4640      	mov	r0, r8
 800128e:	47d0      	blx	sl
 8001290:	3001      	adds	r0, #1
 8001292:	d0ad      	beq.n	80011f0 <_printf_i+0x15c>
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	079b      	lsls	r3, r3, #30
 8001298:	d413      	bmi.n	80012c2 <_printf_i+0x22e>
 800129a:	68e0      	ldr	r0, [r4, #12]
 800129c:	9b03      	ldr	r3, [sp, #12]
 800129e:	4298      	cmp	r0, r3
 80012a0:	bfb8      	it	lt
 80012a2:	4618      	movlt	r0, r3
 80012a4:	e7a6      	b.n	80011f4 <_printf_i+0x160>
 80012a6:	2301      	movs	r3, #1
 80012a8:	4632      	mov	r2, r6
 80012aa:	4649      	mov	r1, r9
 80012ac:	4640      	mov	r0, r8
 80012ae:	47d0      	blx	sl
 80012b0:	3001      	adds	r0, #1
 80012b2:	d09d      	beq.n	80011f0 <_printf_i+0x15c>
 80012b4:	3501      	adds	r5, #1
 80012b6:	68e3      	ldr	r3, [r4, #12]
 80012b8:	9903      	ldr	r1, [sp, #12]
 80012ba:	1a5b      	subs	r3, r3, r1
 80012bc:	42ab      	cmp	r3, r5
 80012be:	dcf2      	bgt.n	80012a6 <_printf_i+0x212>
 80012c0:	e7eb      	b.n	800129a <_printf_i+0x206>
 80012c2:	2500      	movs	r5, #0
 80012c4:	f104 0619 	add.w	r6, r4, #25
 80012c8:	e7f5      	b.n	80012b6 <_printf_i+0x222>
 80012ca:	bf00      	nop
 80012cc:	08001634 	.word	0x08001634
 80012d0:	08001645 	.word	0x08001645

080012d4 <__sflush_r>:
 80012d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80012d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012dc:	0716      	lsls	r6, r2, #28
 80012de:	4605      	mov	r5, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	d454      	bmi.n	800138e <__sflush_r+0xba>
 80012e4:	684b      	ldr	r3, [r1, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	dc02      	bgt.n	80012f0 <__sflush_r+0x1c>
 80012ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dd48      	ble.n	8001382 <__sflush_r+0xae>
 80012f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012f2:	2e00      	cmp	r6, #0
 80012f4:	d045      	beq.n	8001382 <__sflush_r+0xae>
 80012f6:	2300      	movs	r3, #0
 80012f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80012fc:	682f      	ldr	r7, [r5, #0]
 80012fe:	6a21      	ldr	r1, [r4, #32]
 8001300:	602b      	str	r3, [r5, #0]
 8001302:	d030      	beq.n	8001366 <__sflush_r+0x92>
 8001304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	0759      	lsls	r1, r3, #29
 800130a:	d505      	bpl.n	8001318 <__sflush_r+0x44>
 800130c:	6863      	ldr	r3, [r4, #4]
 800130e:	1ad2      	subs	r2, r2, r3
 8001310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001312:	b10b      	cbz	r3, 8001318 <__sflush_r+0x44>
 8001314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001316:	1ad2      	subs	r2, r2, r3
 8001318:	2300      	movs	r3, #0
 800131a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800131c:	6a21      	ldr	r1, [r4, #32]
 800131e:	4628      	mov	r0, r5
 8001320:	47b0      	blx	r6
 8001322:	1c43      	adds	r3, r0, #1
 8001324:	89a3      	ldrh	r3, [r4, #12]
 8001326:	d106      	bne.n	8001336 <__sflush_r+0x62>
 8001328:	6829      	ldr	r1, [r5, #0]
 800132a:	291d      	cmp	r1, #29
 800132c:	d82b      	bhi.n	8001386 <__sflush_r+0xb2>
 800132e:	4a2a      	ldr	r2, [pc, #168]	@ (80013d8 <__sflush_r+0x104>)
 8001330:	410a      	asrs	r2, r1
 8001332:	07d6      	lsls	r6, r2, #31
 8001334:	d427      	bmi.n	8001386 <__sflush_r+0xb2>
 8001336:	2200      	movs	r2, #0
 8001338:	6062      	str	r2, [r4, #4]
 800133a:	04d9      	lsls	r1, r3, #19
 800133c:	6922      	ldr	r2, [r4, #16]
 800133e:	6022      	str	r2, [r4, #0]
 8001340:	d504      	bpl.n	800134c <__sflush_r+0x78>
 8001342:	1c42      	adds	r2, r0, #1
 8001344:	d101      	bne.n	800134a <__sflush_r+0x76>
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	b903      	cbnz	r3, 800134c <__sflush_r+0x78>
 800134a:	6560      	str	r0, [r4, #84]	@ 0x54
 800134c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800134e:	602f      	str	r7, [r5, #0]
 8001350:	b1b9      	cbz	r1, 8001382 <__sflush_r+0xae>
 8001352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001356:	4299      	cmp	r1, r3
 8001358:	d002      	beq.n	8001360 <__sflush_r+0x8c>
 800135a:	4628      	mov	r0, r5
 800135c:	f7ff fbf2 	bl	8000b44 <_free_r>
 8001360:	2300      	movs	r3, #0
 8001362:	6363      	str	r3, [r4, #52]	@ 0x34
 8001364:	e00d      	b.n	8001382 <__sflush_r+0xae>
 8001366:	2301      	movs	r3, #1
 8001368:	4628      	mov	r0, r5
 800136a:	47b0      	blx	r6
 800136c:	4602      	mov	r2, r0
 800136e:	1c50      	adds	r0, r2, #1
 8001370:	d1c9      	bne.n	8001306 <__sflush_r+0x32>
 8001372:	682b      	ldr	r3, [r5, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0c6      	beq.n	8001306 <__sflush_r+0x32>
 8001378:	2b1d      	cmp	r3, #29
 800137a:	d001      	beq.n	8001380 <__sflush_r+0xac>
 800137c:	2b16      	cmp	r3, #22
 800137e:	d11e      	bne.n	80013be <__sflush_r+0xea>
 8001380:	602f      	str	r7, [r5, #0]
 8001382:	2000      	movs	r0, #0
 8001384:	e022      	b.n	80013cc <__sflush_r+0xf8>
 8001386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138a:	b21b      	sxth	r3, r3
 800138c:	e01b      	b.n	80013c6 <__sflush_r+0xf2>
 800138e:	690f      	ldr	r7, [r1, #16]
 8001390:	2f00      	cmp	r7, #0
 8001392:	d0f6      	beq.n	8001382 <__sflush_r+0xae>
 8001394:	0793      	lsls	r3, r2, #30
 8001396:	680e      	ldr	r6, [r1, #0]
 8001398:	bf08      	it	eq
 800139a:	694b      	ldreq	r3, [r1, #20]
 800139c:	600f      	str	r7, [r1, #0]
 800139e:	bf18      	it	ne
 80013a0:	2300      	movne	r3, #0
 80013a2:	eba6 0807 	sub.w	r8, r6, r7
 80013a6:	608b      	str	r3, [r1, #8]
 80013a8:	f1b8 0f00 	cmp.w	r8, #0
 80013ac:	dde9      	ble.n	8001382 <__sflush_r+0xae>
 80013ae:	6a21      	ldr	r1, [r4, #32]
 80013b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80013b2:	4643      	mov	r3, r8
 80013b4:	463a      	mov	r2, r7
 80013b6:	4628      	mov	r0, r5
 80013b8:	47b0      	blx	r6
 80013ba:	2800      	cmp	r0, #0
 80013bc:	dc08      	bgt.n	80013d0 <__sflush_r+0xfc>
 80013be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013c6:	81a3      	strh	r3, [r4, #12]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d0:	4407      	add	r7, r0
 80013d2:	eba8 0800 	sub.w	r8, r8, r0
 80013d6:	e7e7      	b.n	80013a8 <__sflush_r+0xd4>
 80013d8:	dfbffffe 	.word	0xdfbffffe

080013dc <_fflush_r>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	690b      	ldr	r3, [r1, #16]
 80013e0:	4605      	mov	r5, r0
 80013e2:	460c      	mov	r4, r1
 80013e4:	b913      	cbnz	r3, 80013ec <_fflush_r+0x10>
 80013e6:	2500      	movs	r5, #0
 80013e8:	4628      	mov	r0, r5
 80013ea:	bd38      	pop	{r3, r4, r5, pc}
 80013ec:	b118      	cbz	r0, 80013f6 <_fflush_r+0x1a>
 80013ee:	6a03      	ldr	r3, [r0, #32]
 80013f0:	b90b      	cbnz	r3, 80013f6 <_fflush_r+0x1a>
 80013f2:	f7ff f9ad 	bl	8000750 <__sinit>
 80013f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f3      	beq.n	80013e6 <_fflush_r+0xa>
 80013fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001400:	07d0      	lsls	r0, r2, #31
 8001402:	d404      	bmi.n	800140e <_fflush_r+0x32>
 8001404:	0599      	lsls	r1, r3, #22
 8001406:	d402      	bmi.n	800140e <_fflush_r+0x32>
 8001408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800140a:	f7ff fb98 	bl	8000b3e <__retarget_lock_acquire_recursive>
 800140e:	4628      	mov	r0, r5
 8001410:	4621      	mov	r1, r4
 8001412:	f7ff ff5f 	bl	80012d4 <__sflush_r>
 8001416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001418:	07da      	lsls	r2, r3, #31
 800141a:	4605      	mov	r5, r0
 800141c:	d4e4      	bmi.n	80013e8 <_fflush_r+0xc>
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	059b      	lsls	r3, r3, #22
 8001422:	d4e1      	bmi.n	80013e8 <_fflush_r+0xc>
 8001424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001426:	f7ff fb8b 	bl	8000b40 <__retarget_lock_release_recursive>
 800142a:	e7dd      	b.n	80013e8 <_fflush_r+0xc>

0800142c <__swhatbuf_r>:
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	460c      	mov	r4, r1
 8001430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001434:	2900      	cmp	r1, #0
 8001436:	b096      	sub	sp, #88	@ 0x58
 8001438:	4615      	mov	r5, r2
 800143a:	461e      	mov	r6, r3
 800143c:	da0d      	bge.n	800145a <__swhatbuf_r+0x2e>
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	bf14      	ite	ne
 800144a:	2340      	movne	r3, #64	@ 0x40
 800144c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001450:	2000      	movs	r0, #0
 8001452:	6031      	str	r1, [r6, #0]
 8001454:	602b      	str	r3, [r5, #0]
 8001456:	b016      	add	sp, #88	@ 0x58
 8001458:	bd70      	pop	{r4, r5, r6, pc}
 800145a:	466a      	mov	r2, sp
 800145c:	f000 f848 	bl	80014f0 <_fstat_r>
 8001460:	2800      	cmp	r0, #0
 8001462:	dbec      	blt.n	800143e <__swhatbuf_r+0x12>
 8001464:	9901      	ldr	r1, [sp, #4]
 8001466:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800146a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800146e:	4259      	negs	r1, r3
 8001470:	4159      	adcs	r1, r3
 8001472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001476:	e7eb      	b.n	8001450 <__swhatbuf_r+0x24>

08001478 <__smakebuf_r>:
 8001478:	898b      	ldrh	r3, [r1, #12]
 800147a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800147c:	079d      	lsls	r5, r3, #30
 800147e:	4606      	mov	r6, r0
 8001480:	460c      	mov	r4, r1
 8001482:	d507      	bpl.n	8001494 <__smakebuf_r+0x1c>
 8001484:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001488:	6023      	str	r3, [r4, #0]
 800148a:	6123      	str	r3, [r4, #16]
 800148c:	2301      	movs	r3, #1
 800148e:	6163      	str	r3, [r4, #20]
 8001490:	b003      	add	sp, #12
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	ab01      	add	r3, sp, #4
 8001496:	466a      	mov	r2, sp
 8001498:	f7ff ffc8 	bl	800142c <__swhatbuf_r>
 800149c:	9f00      	ldr	r7, [sp, #0]
 800149e:	4605      	mov	r5, r0
 80014a0:	4639      	mov	r1, r7
 80014a2:	4630      	mov	r0, r6
 80014a4:	f7ff fbba 	bl	8000c1c <_malloc_r>
 80014a8:	b948      	cbnz	r0, 80014be <__smakebuf_r+0x46>
 80014aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ae:	059a      	lsls	r2, r3, #22
 80014b0:	d4ee      	bmi.n	8001490 <__smakebuf_r+0x18>
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	81a3      	strh	r3, [r4, #12]
 80014bc:	e7e2      	b.n	8001484 <__smakebuf_r+0xc>
 80014be:	89a3      	ldrh	r3, [r4, #12]
 80014c0:	6020      	str	r0, [r4, #0]
 80014c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c6:	81a3      	strh	r3, [r4, #12]
 80014c8:	9b01      	ldr	r3, [sp, #4]
 80014ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014ce:	b15b      	cbz	r3, 80014e8 <__smakebuf_r+0x70>
 80014d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d4:	4630      	mov	r0, r6
 80014d6:	f000 f81d 	bl	8001514 <_isatty_r>
 80014da:	b128      	cbz	r0, 80014e8 <__smakebuf_r+0x70>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	81a3      	strh	r3, [r4, #12]
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	431d      	orrs	r5, r3
 80014ec:	81a5      	strh	r5, [r4, #12]
 80014ee:	e7cf      	b.n	8001490 <__smakebuf_r+0x18>

080014f0 <_fstat_r>:
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	4d07      	ldr	r5, [pc, #28]	@ (8001510 <_fstat_r+0x20>)
 80014f4:	2300      	movs	r3, #0
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	602b      	str	r3, [r5, #0]
 80014fe:	f7ff f813 	bl	8000528 <_fstat>
 8001502:	1c43      	adds	r3, r0, #1
 8001504:	d102      	bne.n	800150c <_fstat_r+0x1c>
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	b103      	cbz	r3, 800150c <_fstat_r+0x1c>
 800150a:	6023      	str	r3, [r4, #0]
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	200001b8 	.word	0x200001b8

08001514 <_isatty_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4d06      	ldr	r5, [pc, #24]	@ (8001530 <_isatty_r+0x1c>)
 8001518:	2300      	movs	r3, #0
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	602b      	str	r3, [r5, #0]
 8001520:	f7ff f812 	bl	8000548 <_isatty>
 8001524:	1c43      	adds	r3, r0, #1
 8001526:	d102      	bne.n	800152e <_isatty_r+0x1a>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	b103      	cbz	r3, 800152e <_isatty_r+0x1a>
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	200001b8 	.word	0x200001b8

08001534 <_sbrk_r>:
 8001534:	b538      	push	{r3, r4, r5, lr}
 8001536:	4d06      	ldr	r5, [pc, #24]	@ (8001550 <_sbrk_r+0x1c>)
 8001538:	2300      	movs	r3, #0
 800153a:	4604      	mov	r4, r0
 800153c:	4608      	mov	r0, r1
 800153e:	602b      	str	r3, [r5, #0]
 8001540:	f7ff f81a 	bl	8000578 <_sbrk>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d102      	bne.n	800154e <_sbrk_r+0x1a>
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	b103      	cbz	r3, 800154e <_sbrk_r+0x1a>
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	bd38      	pop	{r3, r4, r5, pc}
 8001550:	200001b8 	.word	0x200001b8

08001554 <_init>:
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	bf00      	nop
 8001558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155a:	bc08      	pop	{r3}
 800155c:	469e      	mov	lr, r3
 800155e:	4770      	bx	lr

08001560 <_fini>:
 8001560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001562:	bf00      	nop
 8001564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001566:	bc08      	pop	{r3}
 8001568:	469e      	mov	lr, r3
 800156a:	4770      	bx	lr
